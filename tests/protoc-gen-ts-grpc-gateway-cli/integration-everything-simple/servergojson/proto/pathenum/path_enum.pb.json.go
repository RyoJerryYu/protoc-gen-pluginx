//Code generated by protoc-gen-go-json. DO NOT EDIT.
//versions:
//- protoc-gen-go-json v1.0.27
//- protoc (unknown)
//source: proto/pathenum/path_enum.proto

package pathenum

import (
	bytes "bytes"
	json "encoding/json"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// MarshalJSON implements json.Marshaler
func (enum PathEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(enum.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (enum *PathEnum) UnmarshalJSON(b []byte) error {
	dec := json.NewDecoder(bytes.NewReader(b))
	v, err := dec.Token()
	if err != nil {
		return err
	}
	switch v := v.(type) {
	case json.Number:
		n, err := v.Int64()
		if err != nil {
			return err
		}
		*enum = PathEnum(n)
	case float64:
		*enum = PathEnum(v)
	case string:
		*enum = PathEnum(PathEnum_value[v])
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
	return nil
}

// MarshalJSON implements json.Marshaler
func (enum SnakeCaseForImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(enum.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (enum *SnakeCaseForImport) UnmarshalJSON(b []byte) error {
	dec := json.NewDecoder(bytes.NewReader(b))
	v, err := dec.Token()
	if err != nil {
		return err
	}
	switch v := v.(type) {
	case json.Number:
		n, err := v.Int64()
		if err != nil {
			return err
		}
		*enum = SnakeCaseForImport(n)
	case float64:
		*enum = SnakeCaseForImport(v)
	case string:
		*enum = SnakeCaseForImport(SnakeCaseForImport_value[v])
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
	return nil
}

// MarshalJSON implements json.Marshaler
func (msg *MessagePathEnum) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *MessagePathEnum) UnmarshalJSON(b []byte) error {
	return protojson.UnmarshalOptions{}.Unmarshal(b, msg)
}

// MarshalJSON implements json.Marshaler
func (enum MessagePathEnum_NestedPathEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(enum.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (enum *MessagePathEnum_NestedPathEnum) UnmarshalJSON(b []byte) error {
	dec := json.NewDecoder(bytes.NewReader(b))
	v, err := dec.Token()
	if err != nil {
		return err
	}
	switch v := v.(type) {
	case json.Number:
		n, err := v.Int64()
		if err != nil {
			return err
		}
		*enum = MessagePathEnum_NestedPathEnum(n)
	case float64:
		*enum = MessagePathEnum_NestedPathEnum(v)
	case string:
		*enum = MessagePathEnum_NestedPathEnum(MessagePathEnum_NestedPathEnum_value[v])
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
	return nil
}

// MarshalJSON implements json.Marshaler
func (msg *MessageWithPathEnum) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *MessageWithPathEnum) UnmarshalJSON(b []byte) error {
	return protojson.UnmarshalOptions{}.Unmarshal(b, msg)
}

// MarshalJSON implements json.Marshaler
func (msg *MessageWithNestedPathEnum) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *MessageWithNestedPathEnum) UnmarshalJSON(b []byte) error {
	return protojson.UnmarshalOptions{}.Unmarshal(b, msg)
}
