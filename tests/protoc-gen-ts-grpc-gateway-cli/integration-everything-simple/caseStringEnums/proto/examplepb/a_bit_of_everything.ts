// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/examplepb/a_bit_of_everything.proto

/* eslint-disable */
import { Duration } from "../../google/protobuf/duration";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";
import { StringValue } from "../../google/protobuf/wrappers";
import { Status } from "../../google/rpc/status";
import { OneofEnumMessage } from "../oneofenum/oneof_enum";
import {
  MessagePathEnum_NestedPathEnum,
  messagePathEnum_NestedPathEnumFromJSON,
  messagePathEnum_NestedPathEnumToJSON,
  MessageWithNestedPathEnum,
  MessageWithPathEnum,
  PathEnum,
  pathEnumFromJSON,
  pathEnumToJSON,
  snakeCaseForImport,
  snakeCaseForImportFromJSON,
  snakeCaseForImportToJSON,
} from "../pathenum/path_enum";
import { StringMessage } from "../sub/message";
import { IdMessage } from "../sub2/message";

export const protobufPackage = "proto.examplepb";

/** NumericEnum is one or zero. */
export enum NumericEnum {
  /** ZERO - ZERO means 0 */
  ZERO = "ZERO",
  /** ONE - ONE means 1 */
  ONE = "ONE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function numericEnumFromJSON(object: any): NumericEnum {
  switch (object) {
    case 0:
    case "ZERO":
      return NumericEnum.ZERO;
    case 1:
    case "ONE":
      return NumericEnum.ONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NumericEnum.UNRECOGNIZED;
  }
}

export function numericEnumToJSON(object: NumericEnum): string {
  switch (object) {
    case NumericEnum.ZERO:
      return "ZERO";
    case NumericEnum.ONE:
      return "ONE";
    case NumericEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCaseEnum {
  /** value_c - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_c = "value_c",
  /** value_d - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_d = "value_d",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function snakeCaseEnumFromJSON(object: any): snakeCaseEnum {
  switch (object) {
    case 0:
    case "value_c":
      return snakeCaseEnum.value_c;
    case 1:
    case "value_d":
      return snakeCaseEnum.value_d;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCaseEnum.UNRECOGNIZED;
  }
}

export function snakeCaseEnumToJSON(object: snakeCaseEnum): string {
  switch (object) {
    case snakeCaseEnum.value_c:
      return "value_c";
    case snakeCaseEnum.value_d:
      return "value_d";
    case snakeCaseEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCase0Enum {
  /** value_e - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_e = "value_e",
  /** value_f - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_f = "value_f",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function snakeCase0EnumFromJSON(object: any): snakeCase0Enum {
  switch (object) {
    case 0:
    case "value_e":
      return snakeCase0Enum.value_e;
    case 1:
    case "value_f":
      return snakeCase0Enum.value_f;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCase0Enum.UNRECOGNIZED;
  }
}

export function snakeCase0EnumToJSON(object: snakeCase0Enum): string {
  switch (object) {
    case snakeCase0Enum.value_e:
      return "value_e";
    case snakeCase0Enum.value_f:
      return "value_f";
    case snakeCase0Enum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ErrorResponse {
  correlationId: string;
  error: ErrorObject | undefined;
}

export interface ErrorObject {
  code: number;
  message: string;
}

/** Intentionally complicated message type to cover many features of Protobuf. */
export interface ABitOfEverything {
  singleNested: ABitOfEverything_Nested | undefined;
  uuid: string;
  nested: ABitOfEverything_Nested[];
  floatValue: number;
  doubleValue: number;
  int64Value: number;
  uint64Value: number;
  int32Value: number;
  fixed64Value: number;
  fixed32Value: number;
  boolValue: boolean;
  stringValue: string;
  bytesValue: Uint8Array;
  uint32Value: number;
  enumValue: NumericEnum;
  pathEnumValue: PathEnum;
  nestedPathEnumValue: MessagePathEnum_NestedPathEnum;
  sfixed32Value: number;
  sfixed64Value: number;
  sint32Value: number;
  sint64Value: number;
  repeatedStringValue: string[];
  oneofEmpty?: Empty | undefined;
  oneofString?: string | undefined;
  mapValue: { [key: string]: NumericEnum };
  mappedStringValue: { [key: string]: string };
  mappedNestedValue: { [key: string]: ABitOfEverything_Nested };
  nonConventionalNameValue: string;
  timestampValue: Date | undefined;
  /** repeated enum value. it is comma-separated in query */
  repeatedEnumValue: NumericEnum[];
  /** repeated numeric enum comment (This comment is overridden by the field annotation) */
  repeatedEnumAnnotation: NumericEnum[];
  /** numeric enum comment (This comment is overridden by the field annotation) */
  enumValueAnnotation: NumericEnum;
  /** repeated string comment (This comment is overridden by the field annotation) */
  repeatedStringAnnotation: string[];
  /** repeated nested object comment (This comment is overridden by the field annotation) */
  repeatedNestedAnnotation: ABitOfEverything_Nested[];
  /** nested object comments (This comment is overridden by the field annotation) */
  nestedAnnotation: ABitOfEverything_Nested | undefined;
  int64OverrideType: number;
  /** mark a field as required in Open API definition */
  requiredStringViaFieldBehaviorAnnotation: string;
  /** mark a field as readonly in Open API definition */
  outputOnlyStringViaFieldBehaviorAnnotation: string;
  optionalStringValue?: string | undefined;
  /** Test openapiv2 generation of repeated fields */
  productId: string[];
  /** Test openapiv2 generation of required fields with annotation and jsonschema to reproduce */
  optionalStringField: string;
  requiredStringField1: string;
  requiredStringField2: string;
  /** Test openapiv2 handling of required json_name fields */
  requiredFieldBehaviorJsonName: string;
  requiredFieldSchemaJsonName: string;
  /** Trailing only */
  trailingOnly: string;
  /** Trailing only dot. */
  trailingOnlyDot: string;
  /** Leading both */
  trailingBoth: string;
  /**
   * Leading multiline
   *
   * This is an example of a multi-line comment.
   */
  trailingMultiline: string;
  /** Specify a custom format of repeated field items */
  uuids: string[];
}

/** Nested is nested type. */
export interface ABitOfEverything_Nested {
  /** name is nested field. */
  name: string;
  amount: number;
  /** DeepEnum comment. */
  ok: ABitOfEverything_Nested_DeepEnum;
}

/** DeepEnum is one or zero. */
export enum ABitOfEverything_Nested_DeepEnum {
  /** FALSE - FALSE is false. */
  FALSE = "FALSE",
  /** TRUE - TRUE is true. */
  TRUE = "TRUE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function aBitOfEverything_Nested_DeepEnumFromJSON(
  object: any,
): ABitOfEverything_Nested_DeepEnum {
  switch (object) {
    case 0:
    case "FALSE":
      return ABitOfEverything_Nested_DeepEnum.FALSE;
    case 1:
    case "TRUE":
      return ABitOfEverything_Nested_DeepEnum.TRUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED;
  }
}

export function aBitOfEverything_Nested_DeepEnumToJSON(
  object: ABitOfEverything_Nested_DeepEnum,
): string {
  switch (object) {
    case ABitOfEverything_Nested_DeepEnum.FALSE:
      return "FALSE";
    case ABitOfEverything_Nested_DeepEnum.TRUE:
      return "TRUE";
    case ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ABitOfEverything_MapValueEntry {
  key: string;
  value: NumericEnum;
}

export interface ABitOfEverything_MappedStringValueEntry {
  key: string;
  value: string;
}

export interface ABitOfEverything_MappedNestedValueEntry {
  key: string;
  value: ABitOfEverything_Nested | undefined;
}

/** ABitOfEverythingRepeated is used to validate repeated path parameter functionality */
export interface ABitOfEverythingRepeated {
  /** repeated values. they are comma-separated in path */
  pathRepeatedFloatValue: number[];
  pathRepeatedDoubleValue: number[];
  pathRepeatedInt64Value: number[];
  pathRepeatedUint64Value: number[];
  pathRepeatedInt32Value: number[];
  pathRepeatedFixed64Value: number[];
  pathRepeatedFixed32Value: number[];
  pathRepeatedBoolValue: boolean[];
  pathRepeatedStringValue: string[];
  pathRepeatedBytesValue: Uint8Array[];
  pathRepeatedUint32Value: number[];
  pathRepeatedEnumValue: NumericEnum[];
  pathRepeatedSfixed32Value: number[];
  pathRepeatedSfixed64Value: number[];
  pathRepeatedSint32Value: number[];
  pathRepeatedSint64Value: number[];
}

export interface CheckStatusResponse {
  status: Status | undefined;
}

export interface Body {
  name: string;
}

export interface MessageWithBody {
  id: string;
  data: Body | undefined;
}

/** UpdateV2Request request for update includes the message and the update mask */
export interface UpdateV2Request {
  abe: ABitOfEverything | undefined;
  /** The paths to update. */
  updateMask: string[] | undefined;
}

/**
 * An example resource type from AIP-123 used to test the behavior described in
 * the CreateBookRequest message.
 *
 * See: https://google.aip.dev/123
 */
export interface Book {
  /**
   * The resource name of the book.
   *
   * Format: `publishers/{publisher}/books/{book}`
   *
   * Example: `publishers/1257894000000000000/books/my-book`
   */
  name: string;
  /** Output only. The book's ID. */
  id: string;
  /** Output only. Creation time of the book. */
  createTime: Date | undefined;
}

/**
 * A standard Create message from AIP-133 with a user-specified ID.
 * The user-specified ID (the `book_id` field in this example) must become a
 * query parameter in the OpenAPI spec.
 *
 * See: https://google.aip.dev/133#user-specified-ids
 */
export interface CreateBookRequest {
  /**
   * The publisher in which to create the book.
   *
   * Format: `publishers/{publisher}`
   *
   * Example: `publishers/1257894000000000000`
   */
  parent: string;
  /** The book to create. */
  book: Book | undefined;
  /**
   * The ID to use for the book.
   *
   * This must start with an alphanumeric character.
   */
  bookId: string;
}

/**
 * A standard Update message from AIP-134
 *
 * See: https://google.aip.dev/134#request-message
 */
export interface UpdateBookRequest {
  /**
   * The book to update.
   *
   * The book's `name` field is used to identify the book to be updated.
   * Format: publishers/{publisher}/books/{book}
   */
  book: Book | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
  /**
   * If set to true, and the book is not found, a new book will be created.
   * In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

export interface SnakeEnumRequest {
  what: snakeCaseEnum;
  who: snakeCase0Enum;
  where: snakeCaseForImport;
}

export interface SnakeEnumResponse {}

/**
 * Required message type -> OpenAPI
 * https://github.com/grpc-ecosystem/grpc-gateway/issues/2837
 */
export interface RequiredMessageTypeRequest {
  id: string;
  foo: Foo | undefined;
}

export interface Foo {
  bar: Bar | undefined;
}

export interface Bar {
  id: string;
}

function createBaseErrorResponse(): ErrorResponse {
  return { correlationId: "", error: undefined };
}

export const ErrorResponse: MessageFns<ErrorResponse> = {
  fromJSON(object: any): ErrorResponse {
    return {
      correlationId: isSet(object.correlationId)
        ? globalThis.String(object.correlationId)
        : "",
      error: isSet(object.error)
        ? ErrorObject.fromJSON(object.error)
        : undefined,
    };
  },

  toJSON(message: ErrorResponse): unknown {
    const obj: any = {};
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    if (message.error !== undefined) {
      obj.error = ErrorObject.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorResponse>): ErrorResponse {
    return ErrorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorResponse>): ErrorResponse {
    const message = createBaseErrorResponse();
    message.correlationId = object.correlationId ?? "";
    message.error =
      object.error !== undefined && object.error !== null
        ? ErrorObject.fromPartial(object.error)
        : undefined;
    return message;
  },
};

function createBaseErrorObject(): ErrorObject {
  return { code: 0, message: "" };
}

export const ErrorObject: MessageFns<ErrorObject> = {
  fromJSON(object: any): ErrorObject {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorObject): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorObject>): ErrorObject {
    return ErrorObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorObject>): ErrorObject {
    const message = createBaseErrorObject();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseABitOfEverything(): ABitOfEverything {
  return {
    singleNested: undefined,
    uuid: "",
    nested: [],
    floatValue: 0,
    doubleValue: 0,
    int64Value: 0,
    uint64Value: 0,
    int32Value: 0,
    fixed64Value: 0,
    fixed32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: new Uint8Array(0),
    uint32Value: 0,
    enumValue: NumericEnum.ZERO,
    pathEnumValue: PathEnum.ABC,
    nestedPathEnumValue: MessagePathEnum_NestedPathEnum.GHI,
    sfixed32Value: 0,
    sfixed64Value: 0,
    sint32Value: 0,
    sint64Value: 0,
    repeatedStringValue: [],
    oneofEmpty: undefined,
    oneofString: undefined,
    mapValue: {},
    mappedStringValue: {},
    mappedNestedValue: {},
    nonConventionalNameValue: "",
    timestampValue: undefined,
    repeatedEnumValue: [],
    repeatedEnumAnnotation: [],
    enumValueAnnotation: NumericEnum.ZERO,
    repeatedStringAnnotation: [],
    repeatedNestedAnnotation: [],
    nestedAnnotation: undefined,
    int64OverrideType: 0,
    requiredStringViaFieldBehaviorAnnotation: "",
    outputOnlyStringViaFieldBehaviorAnnotation: "",
    optionalStringValue: undefined,
    productId: [],
    optionalStringField: "",
    requiredStringField1: "",
    requiredStringField2: "",
    requiredFieldBehaviorJsonName: "",
    requiredFieldSchemaJsonName: "",
    trailingOnly: "",
    trailingOnlyDot: "",
    trailingBoth: "",
    trailingMultiline: "",
    uuids: [],
  };
}

export const ABitOfEverything: MessageFns<ABitOfEverything> = {
  fromJSON(object: any): ABitOfEverything {
    return {
      singleNested: isSet(object.singleNested)
        ? ABitOfEverything_Nested.fromJSON(object.singleNested)
        : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      nested: globalThis.Array.isArray(object?.nested)
        ? object.nested.map((e: any) => ABitOfEverything_Nested.fromJSON(e))
        : [],
      floatValue: isSet(object.floatValue)
        ? globalThis.Number(object.floatValue)
        : 0,
      doubleValue: isSet(object.doubleValue)
        ? globalThis.Number(object.doubleValue)
        : 0,
      int64Value: isSet(object.int64Value)
        ? globalThis.Number(object.int64Value)
        : 0,
      uint64Value: isSet(object.uint64Value)
        ? globalThis.Number(object.uint64Value)
        : 0,
      int32Value: isSet(object.int32Value)
        ? globalThis.Number(object.int32Value)
        : 0,
      fixed64Value: isSet(object.fixed64Value)
        ? globalThis.Number(object.fixed64Value)
        : 0,
      fixed32Value: isSet(object.fixed32Value)
        ? globalThis.Number(object.fixed32Value)
        : 0,
      boolValue: isSet(object.boolValue)
        ? globalThis.Boolean(object.boolValue)
        : false,
      stringValue: isSet(object.stringValue)
        ? globalThis.String(object.stringValue)
        : "",
      bytesValue: isSet(object.bytesValue)
        ? bytesFromBase64(object.bytesValue)
        : new Uint8Array(0),
      uint32Value: isSet(object.uint32Value)
        ? globalThis.Number(object.uint32Value)
        : 0,
      enumValue: isSet(object.enumValue)
        ? numericEnumFromJSON(object.enumValue)
        : NumericEnum.ZERO,
      pathEnumValue: isSet(object.pathEnumValue)
        ? pathEnumFromJSON(object.pathEnumValue)
        : PathEnum.ABC,
      nestedPathEnumValue: isSet(object.nestedPathEnumValue)
        ? messagePathEnum_NestedPathEnumFromJSON(object.nestedPathEnumValue)
        : MessagePathEnum_NestedPathEnum.GHI,
      sfixed32Value: isSet(object.sfixed32Value)
        ? globalThis.Number(object.sfixed32Value)
        : 0,
      sfixed64Value: isSet(object.sfixed64Value)
        ? globalThis.Number(object.sfixed64Value)
        : 0,
      sint32Value: isSet(object.sint32Value)
        ? globalThis.Number(object.sint32Value)
        : 0,
      sint64Value: isSet(object.sint64Value)
        ? globalThis.Number(object.sint64Value)
        : 0,
      repeatedStringValue: globalThis.Array.isArray(object?.repeatedStringValue)
        ? object.repeatedStringValue.map((e: any) => globalThis.String(e))
        : [],
      oneofEmpty: isSet(object.oneofEmpty)
        ? Empty.fromJSON(object.oneofEmpty)
        : undefined,
      oneofString: isSet(object.oneofString)
        ? globalThis.String(object.oneofString)
        : undefined,
      mapValue: isObject(object.mapValue)
        ? Object.entries(object.mapValue).reduce<{
            [key: string]: NumericEnum;
          }>((acc, [key, value]) => {
            acc[key] = numericEnumFromJSON(value);
            return acc;
          }, {})
        : {},
      mappedStringValue: isObject(object.mappedStringValue)
        ? Object.entries(object.mappedStringValue).reduce<{
            [key: string]: string;
          }>((acc, [key, value]) => {
            acc[key] = String(value);
            return acc;
          }, {})
        : {},
      mappedNestedValue: isObject(object.mappedNestedValue)
        ? Object.entries(object.mappedNestedValue).reduce<{
            [key: string]: ABitOfEverything_Nested;
          }>((acc, [key, value]) => {
            acc[key] = ABitOfEverything_Nested.fromJSON(value);
            return acc;
          }, {})
        : {},
      nonConventionalNameValue: isSet(object.nonConventionalNameValue)
        ? globalThis.String(object.nonConventionalNameValue)
        : "",
      timestampValue: isSet(object.timestampValue)
        ? fromJsonTimestamp(object.timestampValue)
        : undefined,
      repeatedEnumValue: globalThis.Array.isArray(object?.repeatedEnumValue)
        ? object.repeatedEnumValue.map((e: any) => numericEnumFromJSON(e))
        : [],
      repeatedEnumAnnotation: globalThis.Array.isArray(
        object?.repeatedEnumAnnotation,
      )
        ? object.repeatedEnumAnnotation.map((e: any) => numericEnumFromJSON(e))
        : [],
      enumValueAnnotation: isSet(object.enumValueAnnotation)
        ? numericEnumFromJSON(object.enumValueAnnotation)
        : NumericEnum.ZERO,
      repeatedStringAnnotation: globalThis.Array.isArray(
        object?.repeatedStringAnnotation,
      )
        ? object.repeatedStringAnnotation.map((e: any) => globalThis.String(e))
        : [],
      repeatedNestedAnnotation: globalThis.Array.isArray(
        object?.repeatedNestedAnnotation,
      )
        ? object.repeatedNestedAnnotation.map((e: any) =>
            ABitOfEverything_Nested.fromJSON(e),
          )
        : [],
      nestedAnnotation: isSet(object.nestedAnnotation)
        ? ABitOfEverything_Nested.fromJSON(object.nestedAnnotation)
        : undefined,
      int64OverrideType: isSet(object.int64OverrideType)
        ? globalThis.Number(object.int64OverrideType)
        : 0,
      requiredStringViaFieldBehaviorAnnotation: isSet(
        object.requiredStringViaFieldBehaviorAnnotation,
      )
        ? globalThis.String(object.requiredStringViaFieldBehaviorAnnotation)
        : "",
      outputOnlyStringViaFieldBehaviorAnnotation: isSet(
        object.outputOnlyStringViaFieldBehaviorAnnotation,
      )
        ? globalThis.String(object.outputOnlyStringViaFieldBehaviorAnnotation)
        : "",
      optionalStringValue: isSet(object.optionalStringValue)
        ? globalThis.String(object.optionalStringValue)
        : undefined,
      productId: globalThis.Array.isArray(object?.productId)
        ? object.productId.map((e: any) => globalThis.String(e))
        : [],
      optionalStringField: isSet(object.optionalStringField)
        ? globalThis.String(object.optionalStringField)
        : "",
      requiredStringField1: isSet(object.requiredStringField1)
        ? globalThis.String(object.requiredStringField1)
        : "",
      requiredStringField2: isSet(object.requiredStringField2)
        ? globalThis.String(object.requiredStringField2)
        : "",
      requiredFieldBehaviorJsonName: isSet(
        object.required_field_behavior_json_name_custom,
      )
        ? globalThis.String(object.required_field_behavior_json_name_custom)
        : "",
      requiredFieldSchemaJsonName: isSet(
        object.required_field_schema_json_name_custom,
      )
        ? globalThis.String(object.required_field_schema_json_name_custom)
        : "",
      trailingOnly: isSet(object.trailingOnly)
        ? globalThis.String(object.trailingOnly)
        : "",
      trailingOnlyDot: isSet(object.trailingOnlyDot)
        ? globalThis.String(object.trailingOnlyDot)
        : "",
      trailingBoth: isSet(object.trailingBoth)
        ? globalThis.String(object.trailingBoth)
        : "",
      trailingMultiline: isSet(object.trailingMultiline)
        ? globalThis.String(object.trailingMultiline)
        : "",
      uuids: globalThis.Array.isArray(object?.uuids)
        ? object.uuids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ABitOfEverything): unknown {
    const obj: any = {};
    if (message.singleNested !== undefined) {
      obj.singleNested = ABitOfEverything_Nested.toJSON(message.singleNested);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.nested?.length) {
      obj.nested = message.nested.map((e) => ABitOfEverything_Nested.toJSON(e));
    }
    if (message.floatValue !== 0) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== 0) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.int64Value !== 0) {
      obj.int64Value = Math.round(message.int64Value);
    }
    if (message.uint64Value !== 0) {
      obj.uint64Value = Math.round(message.uint64Value);
    }
    if (message.int32Value !== 0) {
      obj.int32Value = Math.round(message.int32Value);
    }
    if (message.fixed64Value !== 0) {
      obj.fixed64Value = Math.round(message.fixed64Value);
    }
    if (message.fixed32Value !== 0) {
      obj.fixed32Value = Math.round(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      obj.boolValue = message.boolValue;
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.bytesValue.length !== 0) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      obj.uint32Value = Math.round(message.uint32Value);
    }
    if (message.enumValue !== NumericEnum.ZERO) {
      obj.enumValue = numericEnumToJSON(message.enumValue);
    }
    if (message.pathEnumValue !== PathEnum.ABC) {
      obj.pathEnumValue = pathEnumToJSON(message.pathEnumValue);
    }
    if (message.nestedPathEnumValue !== MessagePathEnum_NestedPathEnum.GHI) {
      obj.nestedPathEnumValue = messagePathEnum_NestedPathEnumToJSON(
        message.nestedPathEnumValue,
      );
    }
    if (message.sfixed32Value !== 0) {
      obj.sfixed32Value = Math.round(message.sfixed32Value);
    }
    if (message.sfixed64Value !== 0) {
      obj.sfixed64Value = Math.round(message.sfixed64Value);
    }
    if (message.sint32Value !== 0) {
      obj.sint32Value = Math.round(message.sint32Value);
    }
    if (message.sint64Value !== 0) {
      obj.sint64Value = Math.round(message.sint64Value);
    }
    if (message.repeatedStringValue?.length) {
      obj.repeatedStringValue = message.repeatedStringValue;
    }
    if (message.oneofEmpty !== undefined) {
      obj.oneofEmpty = Empty.toJSON(message.oneofEmpty);
    }
    if (message.oneofString !== undefined) {
      obj.oneofString = message.oneofString;
    }
    if (message.mapValue) {
      const entries = Object.entries(message.mapValue);
      if (entries.length > 0) {
        obj.mapValue = {};
        entries.forEach(([k, v]) => {
          obj.mapValue[k] = numericEnumToJSON(v);
        });
      }
    }
    if (message.mappedStringValue) {
      const entries = Object.entries(message.mappedStringValue);
      if (entries.length > 0) {
        obj.mappedStringValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedStringValue[k] = v;
        });
      }
    }
    if (message.mappedNestedValue) {
      const entries = Object.entries(message.mappedNestedValue);
      if (entries.length > 0) {
        obj.mappedNestedValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedNestedValue[k] = ABitOfEverything_Nested.toJSON(v);
        });
      }
    }
    if (message.nonConventionalNameValue !== "") {
      obj.nonConventionalNameValue = message.nonConventionalNameValue;
    }
    if (message.timestampValue !== undefined) {
      obj.timestampValue = message.timestampValue.toISOString();
    }
    if (message.repeatedEnumValue?.length) {
      obj.repeatedEnumValue = message.repeatedEnumValue.map((e) =>
        numericEnumToJSON(e),
      );
    }
    if (message.repeatedEnumAnnotation?.length) {
      obj.repeatedEnumAnnotation = message.repeatedEnumAnnotation.map((e) =>
        numericEnumToJSON(e),
      );
    }
    if (message.enumValueAnnotation !== NumericEnum.ZERO) {
      obj.enumValueAnnotation = numericEnumToJSON(message.enumValueAnnotation);
    }
    if (message.repeatedStringAnnotation?.length) {
      obj.repeatedStringAnnotation = message.repeatedStringAnnotation;
    }
    if (message.repeatedNestedAnnotation?.length) {
      obj.repeatedNestedAnnotation = message.repeatedNestedAnnotation.map((e) =>
        ABitOfEverything_Nested.toJSON(e),
      );
    }
    if (message.nestedAnnotation !== undefined) {
      obj.nestedAnnotation = ABitOfEverything_Nested.toJSON(
        message.nestedAnnotation,
      );
    }
    if (message.int64OverrideType !== 0) {
      obj.int64OverrideType = Math.round(message.int64OverrideType);
    }
    if (message.requiredStringViaFieldBehaviorAnnotation !== "") {
      obj.requiredStringViaFieldBehaviorAnnotation =
        message.requiredStringViaFieldBehaviorAnnotation;
    }
    if (message.outputOnlyStringViaFieldBehaviorAnnotation !== "") {
      obj.outputOnlyStringViaFieldBehaviorAnnotation =
        message.outputOnlyStringViaFieldBehaviorAnnotation;
    }
    if (message.optionalStringValue !== undefined) {
      obj.optionalStringValue = message.optionalStringValue;
    }
    if (message.productId?.length) {
      obj.productId = message.productId;
    }
    if (message.optionalStringField !== "") {
      obj.optionalStringField = message.optionalStringField;
    }
    if (message.requiredStringField1 !== "") {
      obj.requiredStringField1 = message.requiredStringField1;
    }
    if (message.requiredStringField2 !== "") {
      obj.requiredStringField2 = message.requiredStringField2;
    }
    if (message.requiredFieldBehaviorJsonName !== "") {
      obj.required_field_behavior_json_name_custom =
        message.requiredFieldBehaviorJsonName;
    }
    if (message.requiredFieldSchemaJsonName !== "") {
      obj.required_field_schema_json_name_custom =
        message.requiredFieldSchemaJsonName;
    }
    if (message.trailingOnly !== "") {
      obj.trailingOnly = message.trailingOnly;
    }
    if (message.trailingOnlyDot !== "") {
      obj.trailingOnlyDot = message.trailingOnlyDot;
    }
    if (message.trailingBoth !== "") {
      obj.trailingBoth = message.trailingBoth;
    }
    if (message.trailingMultiline !== "") {
      obj.trailingMultiline = message.trailingMultiline;
    }
    if (message.uuids?.length) {
      obj.uuids = message.uuids;
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything>): ABitOfEverything {
    return ABitOfEverything.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything>): ABitOfEverything {
    const message = createBaseABitOfEverything();
    message.singleNested =
      object.singleNested !== undefined && object.singleNested !== null
        ? ABitOfEverything_Nested.fromPartial(object.singleNested)
        : undefined;
    message.uuid = object.uuid ?? "";
    message.nested =
      object.nested?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = object.int64Value ?? 0;
    message.uint64Value = object.uint64Value ?? 0;
    message.int32Value = object.int32Value ?? 0;
    message.fixed64Value = object.fixed64Value ?? 0;
    message.fixed32Value = object.fixed32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? new Uint8Array(0);
    message.uint32Value = object.uint32Value ?? 0;
    message.enumValue = object.enumValue ?? NumericEnum.ZERO;
    message.pathEnumValue = object.pathEnumValue ?? PathEnum.ABC;
    message.nestedPathEnumValue =
      object.nestedPathEnumValue ?? MessagePathEnum_NestedPathEnum.GHI;
    message.sfixed32Value = object.sfixed32Value ?? 0;
    message.sfixed64Value = object.sfixed64Value ?? 0;
    message.sint32Value = object.sint32Value ?? 0;
    message.sint64Value = object.sint64Value ?? 0;
    message.repeatedStringValue =
      object.repeatedStringValue?.map((e) => e) || [];
    message.oneofEmpty =
      object.oneofEmpty !== undefined && object.oneofEmpty !== null
        ? Empty.fromPartial(object.oneofEmpty)
        : undefined;
    message.oneofString = object.oneofString ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{
      [key: string]: NumericEnum;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value as NumericEnum;
      }
      return acc;
    }, {});
    message.mappedStringValue = Object.entries(
      object.mappedStringValue ?? {},
    ).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.mappedNestedValue = Object.entries(
      object.mappedNestedValue ?? {},
    ).reduce<{ [key: string]: ABitOfEverything_Nested }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ABitOfEverything_Nested.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.nonConventionalNameValue = object.nonConventionalNameValue ?? "";
    message.timestampValue = object.timestampValue ?? undefined;
    message.repeatedEnumValue = object.repeatedEnumValue?.map((e) => e) || [];
    message.repeatedEnumAnnotation =
      object.repeatedEnumAnnotation?.map((e) => e) || [];
    message.enumValueAnnotation =
      object.enumValueAnnotation ?? NumericEnum.ZERO;
    message.repeatedStringAnnotation =
      object.repeatedStringAnnotation?.map((e) => e) || [];
    message.repeatedNestedAnnotation =
      object.repeatedNestedAnnotation?.map((e) =>
        ABitOfEverything_Nested.fromPartial(e),
      ) || [];
    message.nestedAnnotation =
      object.nestedAnnotation !== undefined && object.nestedAnnotation !== null
        ? ABitOfEverything_Nested.fromPartial(object.nestedAnnotation)
        : undefined;
    message.int64OverrideType = object.int64OverrideType ?? 0;
    message.requiredStringViaFieldBehaviorAnnotation =
      object.requiredStringViaFieldBehaviorAnnotation ?? "";
    message.outputOnlyStringViaFieldBehaviorAnnotation =
      object.outputOnlyStringViaFieldBehaviorAnnotation ?? "";
    message.optionalStringValue = object.optionalStringValue ?? undefined;
    message.productId = object.productId?.map((e) => e) || [];
    message.optionalStringField = object.optionalStringField ?? "";
    message.requiredStringField1 = object.requiredStringField1 ?? "";
    message.requiredStringField2 = object.requiredStringField2 ?? "";
    message.requiredFieldBehaviorJsonName =
      object.requiredFieldBehaviorJsonName ?? "";
    message.requiredFieldSchemaJsonName =
      object.requiredFieldSchemaJsonName ?? "";
    message.trailingOnly = object.trailingOnly ?? "";
    message.trailingOnlyDot = object.trailingOnlyDot ?? "";
    message.trailingBoth = object.trailingBoth ?? "";
    message.trailingMultiline = object.trailingMultiline ?? "";
    message.uuids = object.uuids?.map((e) => e) || [];
    return message;
  },
};

function createBaseABitOfEverything_Nested(): ABitOfEverything_Nested {
  return { name: "", amount: 0, ok: ABitOfEverything_Nested_DeepEnum.FALSE };
}

export const ABitOfEverything_Nested: MessageFns<ABitOfEverything_Nested> = {
  fromJSON(object: any): ABitOfEverything_Nested {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      ok: isSet(object.ok)
        ? aBitOfEverything_Nested_DeepEnumFromJSON(object.ok)
        : ABitOfEverything_Nested_DeepEnum.FALSE,
    };
  },

  toJSON(message: ABitOfEverything_Nested): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.ok !== ABitOfEverything_Nested_DeepEnum.FALSE) {
      obj.ok = aBitOfEverything_Nested_DeepEnumToJSON(message.ok);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    return ABitOfEverything_Nested.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ABitOfEverything_Nested>,
  ): ABitOfEverything_Nested {
    const message = createBaseABitOfEverything_Nested();
    message.name = object.name ?? "";
    message.amount = object.amount ?? 0;
    message.ok = object.ok ?? ABitOfEverything_Nested_DeepEnum.FALSE;
    return message;
  },
};

function createBaseABitOfEverything_MapValueEntry(): ABitOfEverything_MapValueEntry {
  return { key: "", value: NumericEnum.ZERO };
}

export const ABitOfEverything_MapValueEntry: MessageFns<ABitOfEverything_MapValueEntry> =
  {
    fromJSON(object: any): ABitOfEverything_MapValueEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value)
          ? numericEnumFromJSON(object.value)
          : NumericEnum.ZERO,
      };
    },

    toJSON(message: ABitOfEverything_MapValueEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== NumericEnum.ZERO) {
        obj.value = numericEnumToJSON(message.value);
      }
      return obj;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MapValueEntry>,
    ): ABitOfEverything_MapValueEntry {
      return ABitOfEverything_MapValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MapValueEntry>,
    ): ABitOfEverything_MapValueEntry {
      const message = createBaseABitOfEverything_MapValueEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? NumericEnum.ZERO;
      return message;
    },
  };

function createBaseABitOfEverything_MappedStringValueEntry(): ABitOfEverything_MappedStringValueEntry {
  return { key: "", value: "" };
}

export const ABitOfEverything_MappedStringValueEntry: MessageFns<ABitOfEverything_MappedStringValueEntry> =
  {
    fromJSON(object: any): ABitOfEverything_MappedStringValueEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: ABitOfEverything_MappedStringValueEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MappedStringValueEntry>,
    ): ABitOfEverything_MappedStringValueEntry {
      return ABitOfEverything_MappedStringValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MappedStringValueEntry>,
    ): ABitOfEverything_MappedStringValueEntry {
      const message = createBaseABitOfEverything_MappedStringValueEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseABitOfEverything_MappedNestedValueEntry(): ABitOfEverything_MappedNestedValueEntry {
  return { key: "", value: undefined };
}

export const ABitOfEverything_MappedNestedValueEntry: MessageFns<ABitOfEverything_MappedNestedValueEntry> =
  {
    fromJSON(object: any): ABitOfEverything_MappedNestedValueEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value)
          ? ABitOfEverything_Nested.fromJSON(object.value)
          : undefined,
      };
    },

    toJSON(message: ABitOfEverything_MappedNestedValueEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== undefined) {
        obj.value = ABitOfEverything_Nested.toJSON(message.value);
      }
      return obj;
    },

    create(
      base?: DeepPartial<ABitOfEverything_MappedNestedValueEntry>,
    ): ABitOfEverything_MappedNestedValueEntry {
      return ABitOfEverything_MappedNestedValueEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ABitOfEverything_MappedNestedValueEntry>,
    ): ABitOfEverything_MappedNestedValueEntry {
      const message = createBaseABitOfEverything_MappedNestedValueEntry();
      message.key = object.key ?? "";
      message.value =
        object.value !== undefined && object.value !== null
          ? ABitOfEverything_Nested.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseABitOfEverythingRepeated(): ABitOfEverythingRepeated {
  return {
    pathRepeatedFloatValue: [],
    pathRepeatedDoubleValue: [],
    pathRepeatedInt64Value: [],
    pathRepeatedUint64Value: [],
    pathRepeatedInt32Value: [],
    pathRepeatedFixed64Value: [],
    pathRepeatedFixed32Value: [],
    pathRepeatedBoolValue: [],
    pathRepeatedStringValue: [],
    pathRepeatedBytesValue: [],
    pathRepeatedUint32Value: [],
    pathRepeatedEnumValue: [],
    pathRepeatedSfixed32Value: [],
    pathRepeatedSfixed64Value: [],
    pathRepeatedSint32Value: [],
    pathRepeatedSint64Value: [],
  };
}

export const ABitOfEverythingRepeated: MessageFns<ABitOfEverythingRepeated> = {
  fromJSON(object: any): ABitOfEverythingRepeated {
    return {
      pathRepeatedFloatValue: globalThis.Array.isArray(
        object?.pathRepeatedFloatValue,
      )
        ? object.pathRepeatedFloatValue.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedDoubleValue: globalThis.Array.isArray(
        object?.pathRepeatedDoubleValue,
      )
        ? object.pathRepeatedDoubleValue.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedInt64Value: globalThis.Array.isArray(
        object?.pathRepeatedInt64Value,
      )
        ? object.pathRepeatedInt64Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedUint64Value: globalThis.Array.isArray(
        object?.pathRepeatedUint64Value,
      )
        ? object.pathRepeatedUint64Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedInt32Value: globalThis.Array.isArray(
        object?.pathRepeatedInt32Value,
      )
        ? object.pathRepeatedInt32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedFixed64Value: globalThis.Array.isArray(
        object?.pathRepeatedFixed64Value,
      )
        ? object.pathRepeatedFixed64Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedFixed32Value: globalThis.Array.isArray(
        object?.pathRepeatedFixed32Value,
      )
        ? object.pathRepeatedFixed32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedBoolValue: globalThis.Array.isArray(
        object?.pathRepeatedBoolValue,
      )
        ? object.pathRepeatedBoolValue.map((e: any) => globalThis.Boolean(e))
        : [],
      pathRepeatedStringValue: globalThis.Array.isArray(
        object?.pathRepeatedStringValue,
      )
        ? object.pathRepeatedStringValue.map((e: any) => globalThis.String(e))
        : [],
      pathRepeatedBytesValue: globalThis.Array.isArray(
        object?.pathRepeatedBytesValue,
      )
        ? object.pathRepeatedBytesValue.map((e: any) => bytesFromBase64(e))
        : [],
      pathRepeatedUint32Value: globalThis.Array.isArray(
        object?.pathRepeatedUint32Value,
      )
        ? object.pathRepeatedUint32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedEnumValue: globalThis.Array.isArray(
        object?.pathRepeatedEnumValue,
      )
        ? object.pathRepeatedEnumValue.map((e: any) => numericEnumFromJSON(e))
        : [],
      pathRepeatedSfixed32Value: globalThis.Array.isArray(
        object?.pathRepeatedSfixed32Value,
      )
        ? object.pathRepeatedSfixed32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedSfixed64Value: globalThis.Array.isArray(
        object?.pathRepeatedSfixed64Value,
      )
        ? object.pathRepeatedSfixed64Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedSint32Value: globalThis.Array.isArray(
        object?.pathRepeatedSint32Value,
      )
        ? object.pathRepeatedSint32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedSint64Value: globalThis.Array.isArray(
        object?.pathRepeatedSint64Value,
      )
        ? object.pathRepeatedSint64Value.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ABitOfEverythingRepeated): unknown {
    const obj: any = {};
    if (message.pathRepeatedFloatValue?.length) {
      obj.pathRepeatedFloatValue = message.pathRepeatedFloatValue;
    }
    if (message.pathRepeatedDoubleValue?.length) {
      obj.pathRepeatedDoubleValue = message.pathRepeatedDoubleValue;
    }
    if (message.pathRepeatedInt64Value?.length) {
      obj.pathRepeatedInt64Value = message.pathRepeatedInt64Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedUint64Value?.length) {
      obj.pathRepeatedUint64Value = message.pathRepeatedUint64Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedInt32Value?.length) {
      obj.pathRepeatedInt32Value = message.pathRepeatedInt32Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedFixed64Value?.length) {
      obj.pathRepeatedFixed64Value = message.pathRepeatedFixed64Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedFixed32Value?.length) {
      obj.pathRepeatedFixed32Value = message.pathRepeatedFixed32Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedBoolValue?.length) {
      obj.pathRepeatedBoolValue = message.pathRepeatedBoolValue;
    }
    if (message.pathRepeatedStringValue?.length) {
      obj.pathRepeatedStringValue = message.pathRepeatedStringValue;
    }
    if (message.pathRepeatedBytesValue?.length) {
      obj.pathRepeatedBytesValue = message.pathRepeatedBytesValue.map((e) =>
        base64FromBytes(e),
      );
    }
    if (message.pathRepeatedUint32Value?.length) {
      obj.pathRepeatedUint32Value = message.pathRepeatedUint32Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedEnumValue?.length) {
      obj.pathRepeatedEnumValue = message.pathRepeatedEnumValue.map((e) =>
        numericEnumToJSON(e),
      );
    }
    if (message.pathRepeatedSfixed32Value?.length) {
      obj.pathRepeatedSfixed32Value = message.pathRepeatedSfixed32Value.map(
        (e) => Math.round(e),
      );
    }
    if (message.pathRepeatedSfixed64Value?.length) {
      obj.pathRepeatedSfixed64Value = message.pathRepeatedSfixed64Value.map(
        (e) => Math.round(e),
      );
    }
    if (message.pathRepeatedSint32Value?.length) {
      obj.pathRepeatedSint32Value = message.pathRepeatedSint32Value.map((e) =>
        Math.round(e),
      );
    }
    if (message.pathRepeatedSint64Value?.length) {
      obj.pathRepeatedSint64Value = message.pathRepeatedSint64Value.map((e) =>
        Math.round(e),
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<ABitOfEverythingRepeated>,
  ): ABitOfEverythingRepeated {
    return ABitOfEverythingRepeated.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ABitOfEverythingRepeated>,
  ): ABitOfEverythingRepeated {
    const message = createBaseABitOfEverythingRepeated();
    message.pathRepeatedFloatValue =
      object.pathRepeatedFloatValue?.map((e) => e) || [];
    message.pathRepeatedDoubleValue =
      object.pathRepeatedDoubleValue?.map((e) => e) || [];
    message.pathRepeatedInt64Value =
      object.pathRepeatedInt64Value?.map((e) => e) || [];
    message.pathRepeatedUint64Value =
      object.pathRepeatedUint64Value?.map((e) => e) || [];
    message.pathRepeatedInt32Value =
      object.pathRepeatedInt32Value?.map((e) => e) || [];
    message.pathRepeatedFixed64Value =
      object.pathRepeatedFixed64Value?.map((e) => e) || [];
    message.pathRepeatedFixed32Value =
      object.pathRepeatedFixed32Value?.map((e) => e) || [];
    message.pathRepeatedBoolValue =
      object.pathRepeatedBoolValue?.map((e) => e) || [];
    message.pathRepeatedStringValue =
      object.pathRepeatedStringValue?.map((e) => e) || [];
    message.pathRepeatedBytesValue =
      object.pathRepeatedBytesValue?.map((e) => e) || [];
    message.pathRepeatedUint32Value =
      object.pathRepeatedUint32Value?.map((e) => e) || [];
    message.pathRepeatedEnumValue =
      object.pathRepeatedEnumValue?.map((e) => e) || [];
    message.pathRepeatedSfixed32Value =
      object.pathRepeatedSfixed32Value?.map((e) => e) || [];
    message.pathRepeatedSfixed64Value =
      object.pathRepeatedSfixed64Value?.map((e) => e) || [];
    message.pathRepeatedSint32Value =
      object.pathRepeatedSint32Value?.map((e) => e) || [];
    message.pathRepeatedSint64Value =
      object.pathRepeatedSint64Value?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckStatusResponse(): CheckStatusResponse {
  return { status: undefined };
}

export const CheckStatusResponse: MessageFns<CheckStatusResponse> = {
  fromJSON(object: any): CheckStatusResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: CheckStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    return CheckStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    const message = createBaseCheckStatusResponse();
    message.status =
      object.status !== undefined && object.status !== null
        ? Status.fromPartial(object.status)
        : undefined;
    return message;
  },
};

function createBaseBody(): Body {
  return { name: "" };
}

export const Body: MessageFns<Body> = {
  fromJSON(object: any): Body {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Body): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Body>): Body {
    return Body.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Body>): Body {
    const message = createBaseBody();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMessageWithBody(): MessageWithBody {
  return { id: "", data: undefined };
}

export const MessageWithBody: MessageFns<MessageWithBody> = {
  fromJSON(object: any): MessageWithBody {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? Body.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: MessageWithBody): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = Body.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<MessageWithBody>): MessageWithBody {
    return MessageWithBody.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithBody>): MessageWithBody {
    const message = createBaseMessageWithBody();
    message.id = object.id ?? "";
    message.data =
      object.data !== undefined && object.data !== null
        ? Body.fromPartial(object.data)
        : undefined;
    return message;
  },
};

function createBaseUpdateV2Request(): UpdateV2Request {
  return { abe: undefined, updateMask: undefined };
}

export const UpdateV2Request: MessageFns<UpdateV2Request> = {
  fromJSON(object: any): UpdateV2Request {
    return {
      abe: isSet(object.abe)
        ? ABitOfEverything.fromJSON(object.abe)
        : undefined,
      updateMask: isSet(object.updateMask)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask))
        : undefined,
    };
  },

  toJSON(message: UpdateV2Request): unknown {
    const obj: any = {};
    if (message.abe !== undefined) {
      obj.abe = ABitOfEverything.toJSON(message.abe);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateV2Request>): UpdateV2Request {
    return UpdateV2Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateV2Request>): UpdateV2Request {
    const message = createBaseUpdateV2Request();
    message.abe =
      object.abe !== undefined && object.abe !== null
        ? ABitOfEverything.fromPartial(object.abe)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBook(): Book {
  return { name: "", id: "", createTime: undefined };
}

export const Book: MessageFns<Book> = {
  fromJSON(object: any): Book {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createTime: isSet(object.createTime)
        ? fromJsonTimestamp(object.createTime)
        : undefined,
    };
  },

  toJSON(message: Book): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Book>): Book {
    return Book.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Book>): Book {
    const message = createBaseBook();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCreateBookRequest(): CreateBookRequest {
  return { parent: "", book: undefined, bookId: "" };
}

export const CreateBookRequest: MessageFns<CreateBookRequest> = {
  fromJSON(object: any): CreateBookRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      book: isSet(object.book) ? Book.fromJSON(object.book) : undefined,
      bookId: isSet(object.bookId) ? globalThis.String(object.bookId) : "",
    };
  },

  toJSON(message: CreateBookRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.book !== undefined) {
      obj.book = Book.toJSON(message.book);
    }
    if (message.bookId !== "") {
      obj.bookId = message.bookId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBookRequest>): CreateBookRequest {
    return CreateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBookRequest>): CreateBookRequest {
    const message = createBaseCreateBookRequest();
    message.parent = object.parent ?? "";
    message.book =
      object.book !== undefined && object.book !== null
        ? Book.fromPartial(object.book)
        : undefined;
    message.bookId = object.bookId ?? "";
    return message;
  },
};

function createBaseUpdateBookRequest(): UpdateBookRequest {
  return { book: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateBookRequest: MessageFns<UpdateBookRequest> = {
  fromJSON(object: any): UpdateBookRequest {
    return {
      book: isSet(object.book) ? Book.fromJSON(object.book) : undefined,
      updateMask: isSet(object.updateMask)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask))
        : undefined,
      allowMissing: isSet(object.allowMissing)
        ? globalThis.Boolean(object.allowMissing)
        : false,
    };
  },

  toJSON(message: UpdateBookRequest): unknown {
    const obj: any = {};
    if (message.book !== undefined) {
      obj.book = Book.toJSON(message.book);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    return UpdateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    const message = createBaseUpdateBookRequest();
    message.book =
      object.book !== undefined && object.book !== null
        ? Book.fromPartial(object.book)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseSnakeEnumRequest(): SnakeEnumRequest {
  return {
    what: snakeCaseEnum.value_c,
    who: snakeCase0Enum.value_e,
    where: snakeCaseForImport.value_x,
  };
}

export const SnakeEnumRequest: MessageFns<SnakeEnumRequest> = {
  fromJSON(object: any): SnakeEnumRequest {
    return {
      what: isSet(object.what)
        ? snakeCaseEnumFromJSON(object.what)
        : snakeCaseEnum.value_c,
      who: isSet(object.who)
        ? snakeCase0EnumFromJSON(object.who)
        : snakeCase0Enum.value_e,
      where: isSet(object.where)
        ? snakeCaseForImportFromJSON(object.where)
        : snakeCaseForImport.value_x,
    };
  },

  toJSON(message: SnakeEnumRequest): unknown {
    const obj: any = {};
    if (message.what !== snakeCaseEnum.value_c) {
      obj.what = snakeCaseEnumToJSON(message.what);
    }
    if (message.who !== snakeCase0Enum.value_e) {
      obj.who = snakeCase0EnumToJSON(message.who);
    }
    if (message.where !== snakeCaseForImport.value_x) {
      obj.where = snakeCaseForImportToJSON(message.where);
    }
    return obj;
  },

  create(base?: DeepPartial<SnakeEnumRequest>): SnakeEnumRequest {
    return SnakeEnumRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SnakeEnumRequest>): SnakeEnumRequest {
    const message = createBaseSnakeEnumRequest();
    message.what = object.what ?? snakeCaseEnum.value_c;
    message.who = object.who ?? snakeCase0Enum.value_e;
    message.where = object.where ?? snakeCaseForImport.value_x;
    return message;
  },
};

function createBaseSnakeEnumResponse(): SnakeEnumResponse {
  return {};
}

export const SnakeEnumResponse: MessageFns<SnakeEnumResponse> = {
  fromJSON(_: any): SnakeEnumResponse {
    return {};
  },

  toJSON(_: SnakeEnumResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SnakeEnumResponse>): SnakeEnumResponse {
    return SnakeEnumResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SnakeEnumResponse>): SnakeEnumResponse {
    const message = createBaseSnakeEnumResponse();
    return message;
  },
};

function createBaseRequiredMessageTypeRequest(): RequiredMessageTypeRequest {
  return { id: "", foo: undefined };
}

export const RequiredMessageTypeRequest: MessageFns<RequiredMessageTypeRequest> =
  {
    fromJSON(object: any): RequiredMessageTypeRequest {
      return {
        id: isSet(object.id) ? globalThis.String(object.id) : "",
        foo: isSet(object.foo) ? Foo.fromJSON(object.foo) : undefined,
      };
    },

    toJSON(message: RequiredMessageTypeRequest): unknown {
      const obj: any = {};
      if (message.id !== "") {
        obj.id = message.id;
      }
      if (message.foo !== undefined) {
        obj.foo = Foo.toJSON(message.foo);
      }
      return obj;
    },

    create(
      base?: DeepPartial<RequiredMessageTypeRequest>,
    ): RequiredMessageTypeRequest {
      return RequiredMessageTypeRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<RequiredMessageTypeRequest>,
    ): RequiredMessageTypeRequest {
      const message = createBaseRequiredMessageTypeRequest();
      message.id = object.id ?? "";
      message.foo =
        object.foo !== undefined && object.foo !== null
          ? Foo.fromPartial(object.foo)
          : undefined;
      return message;
    },
  };

function createBaseFoo(): Foo {
  return { bar: undefined };
}

export const Foo: MessageFns<Foo> = {
  fromJSON(object: any): Foo {
    return { bar: isSet(object.bar) ? Bar.fromJSON(object.bar) : undefined };
  },

  toJSON(message: Foo): unknown {
    const obj: any = {};
    if (message.bar !== undefined) {
      obj.bar = Bar.toJSON(message.bar);
    }
    return obj;
  },

  create(base?: DeepPartial<Foo>): Foo {
    return Foo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Foo>): Foo {
    const message = createBaseFoo();
    message.bar =
      object.bar !== undefined && object.bar !== null
        ? Bar.fromPartial(object.bar)
        : undefined;
    return message;
  },
};

function createBaseBar(): Bar {
  return { id: "" };
}

export const Bar: MessageFns<Bar> = {
  fromJSON(object: any): Bar {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Bar): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<Bar>): Bar {
    return Bar.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Bar>): Bar {
    const message = createBaseBar();
    message.id = object.id ?? "";
    return message;
  },
};

/**
 * ABitOfEverything service is used to validate that APIs with complicated
 * proto messages and URL templates are still processed correctly.
 */
export type ABitOfEverythingServiceDefinition =
  typeof ABitOfEverythingServiceDefinition;
export const ABitOfEverythingServiceDefinition = {
  name: "ABitOfEverythingService",
  fullName: "proto.examplepb.ABitOfEverythingService",
  methods: {
    /**
     * Create a new ABitOfEverything
     *
     * This API creates a new ABitOfEverything
     */
    create: {
      name: "Create",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              246, 2, 34, 243, 2, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108,
              101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101,
              114, 121, 116, 104, 105, 110, 103, 47, 123, 102, 108, 111, 97,
              116, 95, 118, 97, 108, 117, 101, 125, 47, 123, 100, 111, 117, 98,
              108, 101, 95, 118, 97, 108, 117, 101, 125, 47, 123, 105, 110, 116,
              54, 52, 95, 118, 97, 108, 117, 101, 125, 47, 115, 101, 112, 97,
              114, 97, 116, 111, 114, 47, 123, 117, 105, 110, 116, 54, 52, 95,
              118, 97, 108, 117, 101, 125, 47, 123, 105, 110, 116, 51, 50, 95,
              118, 97, 108, 117, 101, 125, 47, 123, 102, 105, 120, 101, 100, 54,
              52, 95, 118, 97, 108, 117, 101, 125, 47, 123, 102, 105, 120, 101,
              100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 98, 111,
              111, 108, 95, 118, 97, 108, 117, 101, 125, 47, 123, 115, 116, 114,
              105, 110, 103, 95, 118, 97, 108, 117, 101, 61, 115, 116, 114, 112,
              114, 101, 102, 105, 120, 47, 42, 125, 47, 123, 117, 105, 110, 116,
              51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 115, 102, 105,
              120, 101, 100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123,
              115, 102, 105, 120, 101, 100, 54, 52, 95, 118, 97, 108, 117, 101,
              125, 47, 123, 115, 105, 110, 116, 51, 50, 95, 118, 97, 108, 117,
              101, 125, 47, 123, 115, 105, 110, 116, 54, 52, 95, 118, 97, 108,
              117, 101, 125, 47, 123, 110, 111, 110, 67, 111, 110, 118, 101,
              110, 116, 105, 111, 110, 97, 108, 78, 97, 109, 101, 86, 97, 108,
              117, 101, 125, 47, 123, 101, 110, 117, 109, 95, 118, 97, 108, 117,
              101, 125, 47, 123, 112, 97, 116, 104, 95, 101, 110, 117, 109, 95,
              118, 97, 108, 117, 101, 125, 47, 123, 110, 101, 115, 116, 101,
              100, 95, 112, 97, 116, 104, 95, 101, 110, 117, 109, 95, 118, 97,
              108, 117, 101, 125, 47, 123, 101, 110, 117, 109, 95, 118, 97, 108,
              117, 101, 95, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 125,
            ]),
          ],
        },
      },
    },
    createBody: {
      name: "CreateBody",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              36, 58, 1, 42, 34, 31, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118,
              101, 114, 121, 116, 104, 105, 110, 103,
            ]),
          ],
        },
      },
    },
    /** Create a book. */
    createBook: {
      name: "CreateBook",
      requestType: CreateBookRequest,
      requestStream: false,
      responseType: Book,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              39, 58, 4, 98, 111, 111, 107, 34, 31, 47, 118, 49, 47, 123, 112,
              97, 114, 101, 110, 116, 61, 112, 117, 98, 108, 105, 115, 104, 101,
              114, 115, 47, 42, 125, 47, 98, 111, 111, 107, 115,
            ]),
          ],
        },
      },
    },
    updateBook: {
      name: "UpdateBook",
      requestType: UpdateBookRequest,
      requestStream: false,
      responseType: Book,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              44, 58, 4, 98, 111, 111, 107, 50, 36, 47, 118, 49, 47, 123, 98,
              111, 111, 107, 46, 110, 97, 109, 101, 61, 112, 117, 98, 108, 105,
              115, 104, 101, 114, 115, 47, 42, 47, 98, 111, 111, 107, 115, 47,
              42, 125,
            ]),
          ],
        },
      },
    },
    lookup: {
      name: "Lookup",
      requestType: IdMessage,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              40, 18, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    custom: {
      name: "Custom",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              47, 34, 45, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125, 58, 99,
              117, 115, 116, 111, 109,
            ]),
          ],
        },
      },
    },
    doubleColon: {
      name: "DoubleColon",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              54, 34, 52, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125, 58, 99,
              117, 115, 116, 111, 109, 58, 99, 117, 115, 116, 111, 109,
            ]),
          ],
        },
      },
    },
    update: {
      name: "Update",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              43, 58, 1, 42, 26, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118,
              101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 117, 117, 105,
              100, 125,
            ]),
          ],
        },
      },
    },
    updateV2: {
      name: "UpdateV2",
      requestType: UpdateV2Request,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              150, 1, 58, 3, 97, 98, 101, 90, 49, 58, 3, 97, 98, 101, 50, 42,
              47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47, 97, 95, 98,
              105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121, 116, 104,
              105, 110, 103, 47, 123, 97, 98, 101, 46, 117, 117, 105, 100, 125,
              90, 48, 58, 1, 42, 50, 43, 47, 118, 50, 97, 47, 101, 120, 97, 109,
              112, 108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101,
              118, 101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 97, 98, 101,
              46, 117, 117, 105, 100, 125, 26, 42, 47, 118, 50, 47, 101, 120,
              97, 109, 112, 108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102,
              95, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 47, 123, 97,
              98, 101, 46, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    delete: {
      name: "Delete",
      requestType: IdMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              65, 98, 41, 10, 14, 10, 10, 65, 112, 105, 75, 101, 121, 65, 117,
              116, 104, 18, 0, 10, 23, 10, 6, 79, 65, 117, 116, 104, 50, 18, 13,
              10, 4, 114, 101, 97, 100, 10, 5, 119, 114, 105, 116, 101, 106, 20,
              10, 14, 120, 45, 105, 114, 114, 101, 118, 101, 114, 115, 105, 98,
              108, 101, 18, 2, 32, 1,
            ]),
          ],
          578365826: [
            new Uint8Array([
              40, 42, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 123, 117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    getQuery: {
      name: "GetQuery",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              84, 34, 78, 10, 28, 70, 105, 110, 100, 32, 111, 117, 116, 32, 109,
              111, 114, 101, 32, 97, 98, 111, 117, 116, 32, 71, 101, 116, 81,
              117, 101, 114, 121, 18, 46, 104, 116, 116, 112, 115, 58, 47, 47,
              103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 103, 114, 112,
              99, 45, 101, 99, 111, 115, 121, 115, 116, 101, 109, 47, 103, 114,
              112, 99, 45, 103, 97, 116, 101, 119, 97, 121, 88, 1, 98, 0,
            ]),
          ],
          578365826: [
            new Uint8Array([
              46, 18, 44, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 113, 117, 101, 114, 121, 47, 123,
              117, 117, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    getRepeatedQuery: {
      name: "GetRepeatedQuery",
      requestType: ABitOfEverythingRepeated,
      requestStream: false,
      responseType: ABitOfEverythingRepeated,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              249, 3, 18, 246, 3, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108,
              101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101,
              114, 121, 116, 104, 105, 110, 103, 95, 114, 101, 112, 101, 97,
              116, 101, 100, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 102, 108, 111, 97, 116, 95, 118, 97, 108,
              117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 100, 111, 117, 98, 108, 101, 95, 118, 97,
              108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112,
              101, 97, 116, 101, 100, 95, 105, 110, 116, 54, 52, 95, 118, 97,
              108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112,
              101, 97, 116, 101, 100, 95, 117, 105, 110, 116, 54, 52, 95, 118,
              97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101,
              112, 101, 97, 116, 101, 100, 95, 105, 110, 116, 51, 50, 95, 118,
              97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101,
              112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101, 100, 54, 52,
              95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97, 116, 104, 95,
              114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 105, 120, 101,
              100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 111,
              111, 108, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97, 116,
              104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 116, 114,
              105, 110, 103, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 98, 121,
              116, 101, 115, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 117, 105,
              110, 116, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112,
              97, 116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 101,
              110, 117, 109, 95, 118, 97, 108, 117, 101, 125, 47, 123, 112, 97,
              116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 115, 102,
              105, 120, 101, 100, 51, 50, 95, 118, 97, 108, 117, 101, 125, 47,
              123, 112, 97, 116, 104, 95, 114, 101, 112, 101, 97, 116, 101, 100,
              95, 115, 102, 105, 120, 101, 100, 54, 52, 95, 118, 97, 108, 117,
              101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101, 97,
              116, 101, 100, 95, 115, 105, 110, 116, 51, 50, 95, 118, 97, 108,
              117, 101, 125, 47, 123, 112, 97, 116, 104, 95, 114, 101, 112, 101,
              97, 116, 101, 100, 95, 115, 105, 110, 116, 54, 52, 95, 118, 97,
              108, 117, 101, 125,
            ]),
          ],
        },
      },
    },
    /**
     * Echo allows posting a StringMessage value.
     *
     * It also exposes multiple bindings.
     *
     * This makes it useful when validating that the OpenAPI v2 API
     * description exposes documentation correctly on all paths
     * defined as additional_bindings in the proto.
     */
    echo: {
      name: "Echo",
      requestType: StringMessage,
      requestStream: false,
      responseType: StringMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              197, 2, 10, 8, 101, 99, 104, 111, 32, 114, 112, 99, 18, 17, 83,
              117, 109, 109, 97, 114, 121, 58, 32, 69, 99, 104, 111, 32, 114,
              112, 99, 26, 16, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111,
              110, 32, 69, 99, 104, 111, 34, 68, 10, 18, 70, 105, 110, 100, 32,
              111, 117, 116, 32, 109, 111, 114, 101, 32, 69, 99, 104, 111, 18,
              46, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117,
              98, 46, 99, 111, 109, 47, 103, 114, 112, 99, 45, 101, 99, 111,
              115, 121, 115, 116, 101, 109, 47, 103, 114, 112, 99, 45, 103, 97,
              116, 101, 119, 97, 121, 74, 57, 10, 3, 50, 48, 48, 18, 50, 34, 48,
              10, 16, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47,
              106, 115, 111, 110, 18, 28, 123, 34, 118, 97, 108, 117, 101, 34,
              58, 32, 34, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 118,
              97, 108, 117, 101, 34, 125, 74, 59, 10, 3, 52, 48, 52, 18, 52, 10,
              42, 82, 101, 116, 117, 114, 110, 101, 100, 32, 119, 104, 101, 110,
              32, 116, 104, 101, 32, 114, 101, 115, 111, 117, 114, 99, 101, 32,
              100, 111, 101, 115, 32, 110, 111, 116, 32, 101, 120, 105, 115,
              116, 46, 18, 6, 10, 4, 154, 2, 1, 3, 74, 86, 10, 3, 53, 48, 51,
              18, 79, 10, 54, 82, 101, 116, 117, 114, 110, 101, 100, 32, 119,
              104, 101, 110, 32, 116, 104, 101, 32, 114, 101, 115, 111, 117,
              114, 99, 101, 32, 105, 115, 32, 116, 101, 109, 112, 111, 114, 97,
              114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98,
              108, 101, 46, 42, 21, 10, 8, 120, 45, 110, 117, 109, 98, 101, 114,
              18, 9, 17, 0, 0, 0, 0, 0, 0, 89, 64,
            ]),
          ],
          578365826: [
            new Uint8Array([
              93, 90, 25, 58, 5, 118, 97, 108, 117, 101, 34, 16, 47, 118, 50,
              47, 101, 120, 97, 109, 112, 108, 101, 47, 101, 99, 104, 111, 90,
              18, 18, 16, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              101, 99, 104, 111, 18, 44, 47, 118, 49, 47, 101, 120, 97, 109,
              112, 108, 101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101,
              118, 101, 114, 121, 116, 104, 105, 110, 103, 47, 101, 99, 104,
              111, 47, 123, 118, 97, 108, 117, 101, 125,
            ]),
          ],
        },
      },
    },
    deepPathEcho: {
      name: "DeepPathEcho",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              47, 58, 1, 42, 34, 42, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 100, 101, 101, 112, 95, 112, 97, 116, 104, 47, 123,
              115, 105, 110, 103, 108, 101, 95, 110, 101, 115, 116, 101, 100,
              46, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    noBindings: {
      name: "NoBindings",
      requestType: Duration,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    timeout: {
      name: "Timeout",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              21, 18, 19, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              116, 105, 109, 101, 111, 117, 116,
            ]),
          ],
        },
      },
    },
    errorWithDetails: {
      name: "ErrorWithDetails",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              30, 18, 28, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              101, 114, 114, 111, 114, 119, 105, 116, 104, 100, 101, 116, 97,
              105, 108, 115,
            ]),
          ],
        },
      },
    },
    getMessageWithBody: {
      name: "GetMessageWithBody",
      requestType: MessageWithBody,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              33, 58, 4, 100, 97, 116, 97, 34, 25, 47, 118, 50, 47, 101, 120,
              97, 109, 112, 108, 101, 47, 119, 105, 116, 104, 98, 111, 100, 121,
              47, 123, 105, 100, 125,
            ]),
          ],
        },
      },
    },
    postWithEmptyBody: {
      name: "PostWithEmptyBody",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              41, 58, 1, 42, 34, 36, 47, 118, 50, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 112, 111, 115, 116, 119, 105, 116, 104, 101, 109,
              112, 116, 121, 98, 111, 100, 121, 47, 123, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    checkGetQueryParams: {
      name: "CheckGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              65, 18, 63, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115, 47, 103,
              101, 116, 47, 123, 115, 105, 110, 103, 108, 101, 95, 110, 101,
              115, 116, 101, 100, 46, 110, 97, 109, 101, 125,
            ]),
          ],
        },
      },
    },
    checkNestedEnumGetQueryParams: {
      name: "CheckNestedEnumGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              75, 18, 73, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101, 114, 121,
              116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115, 47, 103,
              101, 116, 47, 110, 101, 115, 116, 101, 100, 95, 101, 110, 117,
              109, 47, 123, 115, 105, 110, 103, 108, 101, 95, 110, 101, 115,
              116, 101, 100, 46, 111, 107, 125,
            ]),
          ],
        },
      },
    },
    checkPostQueryParams: {
      name: "CheckPostQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              75, 58, 13, 115, 105, 110, 103, 108, 101, 95, 110, 101, 115, 116,
              101, 100, 34, 58, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108,
              101, 47, 97, 95, 98, 105, 116, 95, 111, 102, 95, 101, 118, 101,
              114, 121, 116, 104, 105, 110, 103, 47, 112, 97, 114, 97, 109, 115,
              47, 112, 111, 115, 116, 47, 123, 115, 116, 114, 105, 110, 103, 95,
              118, 97, 108, 117, 101, 125,
            ]),
          ],
        },
      },
    },
    overwriteRequestContentType: {
      name: "OverwriteRequestContentType",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              24, 50, 22, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
              47, 120, 45, 98, 97, 114, 45, 109, 105, 109, 101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              44, 58, 1, 42, 34, 39, 47, 118, 50, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 111, 118, 101, 114, 119, 114, 105, 116, 101, 114,
              101, 113, 117, 101, 115, 116, 99, 111, 110, 116, 101, 110, 116,
              116, 121, 112, 101,
            ]),
          ],
        },
      },
    },
    overwriteResponseContentType: {
      name: "OverwriteResponseContentType",
      requestType: Empty,
      requestStream: false,
      responseType: StringValue,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              18, 58, 16, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
              47, 116, 101, 120, 116,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42, 18, 40, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              111, 118, 101, 114, 119, 114, 105, 116, 101, 114, 101, 115, 112,
              111, 110, 115, 101, 99, 111, 110, 116, 101, 110, 116, 116, 121,
              112, 101,
            ]),
          ],
        },
      },
    },
    checkExternalPathEnum: {
      name: "CheckExternalPathEnum",
      requestType: MessageWithPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              19, 18, 17, 47, 118, 50, 47, 123, 118, 97, 108, 117, 101, 125, 58,
              99, 104, 101, 99, 107,
            ]),
          ],
        },
      },
    },
    checkExternalNestedPathEnum: {
      name: "CheckExternalNestedPathEnum",
      requestType: MessageWithNestedPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              19, 18, 17, 47, 118, 51, 47, 123, 118, 97, 108, 117, 101, 125, 58,
              99, 104, 101, 99, 107,
            ]),
          ],
        },
      },
    },
    checkStatus: {
      name: "CheckStatus",
      requestType: Empty,
      requestStream: false,
      responseType: CheckStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              25, 18, 23, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              99, 104, 101, 99, 107, 83, 116, 97, 116, 117, 115,
            ]),
          ],
        },
      },
    },
    postOneofEnum: {
      name: "PostOneofEnum",
      requestType: OneofEnumMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              37, 58, 12, 101, 120, 97, 109, 112, 108, 101, 95, 101, 110, 117,
              109, 34, 21, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101,
              47, 111, 110, 101, 111, 102, 101, 110, 117, 109,
            ]),
          ],
        },
      },
    },
    postRequiredMessageType: {
      name: "PostRequiredMessageType",
      requestType: RequiredMessageTypeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              36, 58, 1, 42, 34, 31, 47, 118, 49, 47, 101, 120, 97, 109, 112,
              108, 101, 47, 114, 101, 113, 117, 105, 114, 101, 100, 109, 101,
              115, 115, 97, 103, 101, 116, 121, 112, 101,
            ]),
          ],
        },
      },
    },
  },
} as const;

/**
 * // camelCase and lowercase service names are valid but not recommended (use TitleCase instead)
 * service camelCaseServiceName {
 *   rpc Empty(google.protobuf.Empty) returns (google.protobuf.Empty) {
 *     option (google.api.http) = {get: "/v2/example/empty"};
 *   }
 * }
 */
export type AnotherServiceWithNoBindingsDefinition =
  typeof AnotherServiceWithNoBindingsDefinition;
export const AnotherServiceWithNoBindingsDefinition = {
  name: "AnotherServiceWithNoBindings",
  fullName: "proto.examplepb.AnotherServiceWithNoBindings",
  methods: {
    noBindings: {
      name: "NoBindings",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export type SnakeEnumServiceDefinition = typeof SnakeEnumServiceDefinition;
export const SnakeEnumServiceDefinition = {
  name: "SnakeEnumService",
  fullName: "proto.examplepb.SnakeEnumService",
  methods: {
    snakeEnum: {
      name: "SnakeEnum",
      requestType: SnakeEnumRequest,
      requestStream: false,
      responseType: SnakeEnumResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              40, 18, 38, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47,
              115, 110, 97, 107, 101, 47, 123, 119, 104, 111, 125, 47, 123, 119,
              104, 97, 116, 125, 47, 123, 119, 104, 101, 114, 101, 125,
            ]),
          ],
        },
      },
    },
  },
} as const;

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
