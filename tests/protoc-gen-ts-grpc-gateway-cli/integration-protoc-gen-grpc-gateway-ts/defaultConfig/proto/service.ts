// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: proto/service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../google/protobuf/empty";
import { ExternalMessage, ExternalRequest, ExternalResponse } from "./msg";

export const protobufPackage = "main";

export enum reasons {
  FOO = "FOO",
  BAR = "BAR",
  BAZ = "BAZ",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function reasonsFromJSON(object: any): reasons {
  switch (object) {
    case 0:
    case "FOO":
      return reasons.FOO;
    case 1:
    case "BAR":
      return reasons.BAR;
    case 2:
    case "BAZ":
      return reasons.BAZ;
    case -1:
    case "UNRECOGNIZED":
    default:
      return reasons.UNRECOGNIZED;
  }
}

export function reasonsToJSON(object: reasons): string {
  switch (object) {
    case reasons.FOO:
      return "FOO";
    case reasons.BAR:
      return "BAR";
    case reasons.BAZ:
      return "BAZ";
    case reasons.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum animals {
  CAT = "CAT",
  DOG = "DOG",
  FISH = "FISH",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function animalsFromJSON(object: any): animals {
  switch (object) {
    case 0:
    case "CAT":
      return animals.CAT;
    case 1:
    case "DOG":
      return animals.DOG;
    case 2:
    case "FISH":
      return animals.FISH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return animals.UNRECOGNIZED;
  }
}

export function animalsToJSON(object: animals): string {
  switch (object) {
    case animals.CAT:
      return "CAT";
    case animals.DOG:
      return "DOG";
    case animals.FISH:
      return "FISH";
    case animals.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UnaryRequest {
  counter: number;
}

export interface UnaryResponse {
  result: number;
}

export interface BinaryRequest {
  data: Uint8Array;
}

export interface BinaryResponse {
  data: Uint8Array;
}

export interface StreamingRequest {
  counter: number;
}

export interface StreamingResponse {
  result: number;
}

export interface HttpGetRequest {
  numToIncrease: number;
}

export interface HttpGetResponse {
  result: number;
}

export interface HttpPostRequest {
  a: number;
  req?: PostRequest | undefined;
  c: number;
}

export interface PostRequest {
  b: number;
}

export interface HttpPostResponse {
  postResult: number;
}

export interface HttpPatchRequest {
  a: number;
  c: number;
}

export interface HttpPatchResponse {
  patchResult: number;
}

export interface HttpDeleteRequest {
  a: number;
}

export interface HttpDeleteWithParamsRequest {
  id: number;
  reason: string;
}

export interface HttpDeleteWithParamsResponse {
  reason: string;
}

export interface HTTPGetWithURLSearchParamsRequest {
  a: number;
  b?: PostRequest | undefined;
  c: number[];
  d?: ExternalMessage | undefined;
}

export interface HTTPGetWithURLSearchParamsResponse {
  urlSearchParamsResult: number;
}

export interface ZeroValueMsg {
  c: number;
  d: number[];
  e: boolean;
}

export interface HTTPGetWithZeroValueURLSearchParamsRequest {
  a: string;
  b: string;
  c?: ZeroValueMsg | undefined;
}

export interface HTTPGetWithZeroValueURLSearchParamsResponse {
  a: string;
  b: string;
  zeroValueMsg?: ZeroValueMsg | undefined;
}

export interface OptionalFieldsRequest {}

export interface OptionalFieldsResponse {
  emptyStr: string;
  emptyNumber: number;
  emptyMsg?: OptionalFieldsSubMsg | undefined;
  emptyOptStr?: string | undefined;
  emptyOptNumber?: number | undefined;
  emptyOptMsg?: OptionalFieldsSubMsg | undefined;
  zeroStr: string;
  zeroNumber: number;
  zeroMsg?: OptionalFieldsSubMsg | undefined;
  zeroOptStr?: string | undefined;
  zeroOptNumber?: number | undefined;
  zeroOptMsg?: OptionalFieldsSubMsg | undefined;
  definedStr: string;
  definedNumber: number;
  definedMsg?: OptionalFieldsSubMsg | undefined;
  definedOptStr?: string | undefined;
  definedOptNumber?: number | undefined;
  definedOptMsg?: OptionalFieldsSubMsg | undefined;
}

export interface OptionalFieldsSubMsg {
  str: string;
  optStr?: string | undefined;
}

export interface Names {
  fooBar: string;
  bazbam: string;
  binbom3: string;
  tin3tam: string;
  ting3Tang: string;
  king3kong: string;
  frim3Fram: string;
  k8sField: string;
}

/** @deprecated */
export interface DeprecatedMessage {
  field: string;
}

export interface MessageWithDeprecatedFields {
  field: string;
  /** @deprecated */
  deprecatedField: string;
}

export interface OneofMessageWithDeprecatedFields {
  field: string;
  /** @deprecated */
  deprecatedField: string;
  oneof?: string | undefined;
  /** @deprecated */
  deprecatedOneof?: string | undefined;
}

export interface MessageWithMultipleOneOfFields {
  id: string;
  a?: string | undefined;
  b?: string | undefined;
  c?: number | undefined;
  d?: number | undefined;
}

function createBaseUnaryRequest(): UnaryRequest {
  return { counter: 0 };
}

export const UnaryRequest: MessageFns<UnaryRequest> = {
  fromJSON(object: any): UnaryRequest {
    return {
      counter: isSet(object.counter) ? globalThis.Number(object.counter) : 0,
    };
  },

  toJSON(message: UnaryRequest): unknown {
    const obj: any = {};
    if (message.counter !== 0) {
      obj.counter = Math.round(message.counter);
    }
    return obj;
  },

  create(base?: DeepPartial<UnaryRequest>): UnaryRequest {
    return UnaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnaryRequest>): UnaryRequest {
    const message = createBaseUnaryRequest();
    message.counter = object.counter ?? 0;
    return message;
  },
};

function createBaseUnaryResponse(): UnaryResponse {
  return { result: 0 };
}

export const UnaryResponse: MessageFns<UnaryResponse> = {
  fromJSON(object: any): UnaryResponse {
    return {
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
    };
  },

  toJSON(message: UnaryResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<UnaryResponse>): UnaryResponse {
    return UnaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnaryResponse>): UnaryResponse {
    const message = createBaseUnaryResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseBinaryRequest(): BinaryRequest {
  return { data: new Uint8Array(0) };
}

export const BinaryRequest: MessageFns<BinaryRequest> = {
  fromJSON(object: any): BinaryRequest {
    return {
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: BinaryRequest): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<BinaryRequest>): BinaryRequest {
    return BinaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BinaryRequest>): BinaryRequest {
    const message = createBaseBinaryRequest();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBinaryResponse(): BinaryResponse {
  return { data: new Uint8Array(0) };
}

export const BinaryResponse: MessageFns<BinaryResponse> = {
  fromJSON(object: any): BinaryResponse {
    return {
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: BinaryResponse): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<BinaryResponse>): BinaryResponse {
    return BinaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BinaryResponse>): BinaryResponse {
    const message = createBaseBinaryResponse();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseStreamingRequest(): StreamingRequest {
  return { counter: 0 };
}

export const StreamingRequest: MessageFns<StreamingRequest> = {
  fromJSON(object: any): StreamingRequest {
    return {
      counter: isSet(object.counter) ? globalThis.Number(object.counter) : 0,
    };
  },

  toJSON(message: StreamingRequest): unknown {
    const obj: any = {};
    if (message.counter !== 0) {
      obj.counter = Math.round(message.counter);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingRequest>): StreamingRequest {
    return StreamingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingRequest>): StreamingRequest {
    const message = createBaseStreamingRequest();
    message.counter = object.counter ?? 0;
    return message;
  },
};

function createBaseStreamingResponse(): StreamingResponse {
  return { result: 0 };
}

export const StreamingResponse: MessageFns<StreamingResponse> = {
  fromJSON(object: any): StreamingResponse {
    return {
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
    };
  },

  toJSON(message: StreamingResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingResponse>): StreamingResponse {
    return StreamingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingResponse>): StreamingResponse {
    const message = createBaseStreamingResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseHttpGetRequest(): HttpGetRequest {
  return { numToIncrease: 0 };
}

export const HttpGetRequest: MessageFns<HttpGetRequest> = {
  fromJSON(object: any): HttpGetRequest {
    return {
      numToIncrease: isSet(object.numToIncrease)
        ? globalThis.Number(object.numToIncrease)
        : 0,
    };
  },

  toJSON(message: HttpGetRequest): unknown {
    const obj: any = {};
    if (message.numToIncrease !== 0) {
      obj.numToIncrease = Math.round(message.numToIncrease);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpGetRequest>): HttpGetRequest {
    return HttpGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpGetRequest>): HttpGetRequest {
    const message = createBaseHttpGetRequest();
    message.numToIncrease = object.numToIncrease ?? 0;
    return message;
  },
};

function createBaseHttpGetResponse(): HttpGetResponse {
  return { result: 0 };
}

export const HttpGetResponse: MessageFns<HttpGetResponse> = {
  fromJSON(object: any): HttpGetResponse {
    return {
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
    };
  },

  toJSON(message: HttpGetResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpGetResponse>): HttpGetResponse {
    return HttpGetResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpGetResponse>): HttpGetResponse {
    const message = createBaseHttpGetResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseHttpPostRequest(): HttpPostRequest {
  return { a: 0, req: undefined, c: 0 };
}

export const HttpPostRequest: MessageFns<HttpPostRequest> = {
  fromJSON(object: any): HttpPostRequest {
    return {
      a: isSet(object.a) ? globalThis.Number(object.a) : 0,
      req: isSet(object.req) ? PostRequest.fromJSON(object.req) : undefined,
      c: isSet(object.c) ? globalThis.Number(object.c) : 0,
    };
  },

  toJSON(message: HttpPostRequest): unknown {
    const obj: any = {};
    if (message.a !== 0) {
      obj.a = Math.round(message.a);
    }
    if (message.req !== undefined) {
      obj.req = PostRequest.toJSON(message.req);
    }
    if (message.c !== 0) {
      obj.c = Math.round(message.c);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpPostRequest>): HttpPostRequest {
    return HttpPostRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpPostRequest>): HttpPostRequest {
    const message = createBaseHttpPostRequest();
    message.a = object.a ?? 0;
    message.req =
      object.req !== undefined && object.req !== null
        ? PostRequest.fromPartial(object.req)
        : undefined;
    message.c = object.c ?? 0;
    return message;
  },
};

function createBasePostRequest(): PostRequest {
  return { b: 0 };
}

export const PostRequest: MessageFns<PostRequest> = {
  fromJSON(object: any): PostRequest {
    return { b: isSet(object.b) ? globalThis.Number(object.b) : 0 };
  },

  toJSON(message: PostRequest): unknown {
    const obj: any = {};
    if (message.b !== 0) {
      obj.b = Math.round(message.b);
    }
    return obj;
  },

  create(base?: DeepPartial<PostRequest>): PostRequest {
    return PostRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostRequest>): PostRequest {
    const message = createBasePostRequest();
    message.b = object.b ?? 0;
    return message;
  },
};

function createBaseHttpPostResponse(): HttpPostResponse {
  return { postResult: 0 };
}

export const HttpPostResponse: MessageFns<HttpPostResponse> = {
  fromJSON(object: any): HttpPostResponse {
    return {
      postResult: isSet(object.postResult)
        ? globalThis.Number(object.postResult)
        : 0,
    };
  },

  toJSON(message: HttpPostResponse): unknown {
    const obj: any = {};
    if (message.postResult !== 0) {
      obj.postResult = Math.round(message.postResult);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpPostResponse>): HttpPostResponse {
    return HttpPostResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpPostResponse>): HttpPostResponse {
    const message = createBaseHttpPostResponse();
    message.postResult = object.postResult ?? 0;
    return message;
  },
};

function createBaseHttpPatchRequest(): HttpPatchRequest {
  return { a: 0, c: 0 };
}

export const HttpPatchRequest: MessageFns<HttpPatchRequest> = {
  fromJSON(object: any): HttpPatchRequest {
    return {
      a: isSet(object.a) ? globalThis.Number(object.a) : 0,
      c: isSet(object.c) ? globalThis.Number(object.c) : 0,
    };
  },

  toJSON(message: HttpPatchRequest): unknown {
    const obj: any = {};
    if (message.a !== 0) {
      obj.a = Math.round(message.a);
    }
    if (message.c !== 0) {
      obj.c = Math.round(message.c);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpPatchRequest>): HttpPatchRequest {
    return HttpPatchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpPatchRequest>): HttpPatchRequest {
    const message = createBaseHttpPatchRequest();
    message.a = object.a ?? 0;
    message.c = object.c ?? 0;
    return message;
  },
};

function createBaseHttpPatchResponse(): HttpPatchResponse {
  return { patchResult: 0 };
}

export const HttpPatchResponse: MessageFns<HttpPatchResponse> = {
  fromJSON(object: any): HttpPatchResponse {
    return {
      patchResult: isSet(object.patchResult)
        ? globalThis.Number(object.patchResult)
        : 0,
    };
  },

  toJSON(message: HttpPatchResponse): unknown {
    const obj: any = {};
    if (message.patchResult !== 0) {
      obj.patchResult = Math.round(message.patchResult);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpPatchResponse>): HttpPatchResponse {
    return HttpPatchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpPatchResponse>): HttpPatchResponse {
    const message = createBaseHttpPatchResponse();
    message.patchResult = object.patchResult ?? 0;
    return message;
  },
};

function createBaseHttpDeleteRequest(): HttpDeleteRequest {
  return { a: 0 };
}

export const HttpDeleteRequest: MessageFns<HttpDeleteRequest> = {
  fromJSON(object: any): HttpDeleteRequest {
    return { a: isSet(object.a) ? globalThis.Number(object.a) : 0 };
  },

  toJSON(message: HttpDeleteRequest): unknown {
    const obj: any = {};
    if (message.a !== 0) {
      obj.a = Math.round(message.a);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpDeleteRequest>): HttpDeleteRequest {
    return HttpDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpDeleteRequest>): HttpDeleteRequest {
    const message = createBaseHttpDeleteRequest();
    message.a = object.a ?? 0;
    return message;
  },
};

function createBaseHttpDeleteWithParamsRequest(): HttpDeleteWithParamsRequest {
  return { id: 0, reason: "" };
}

export const HttpDeleteWithParamsRequest: MessageFns<HttpDeleteWithParamsRequest> =
  {
    fromJSON(object: any): HttpDeleteWithParamsRequest {
      return {
        id: isSet(object.id) ? globalThis.Number(object.id) : 0,
        reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      };
    },

    toJSON(message: HttpDeleteWithParamsRequest): unknown {
      const obj: any = {};
      if (message.id !== 0) {
        obj.id = Math.round(message.id);
      }
      if (message.reason !== "") {
        obj.reason = message.reason;
      }
      return obj;
    },

    create(
      base?: DeepPartial<HttpDeleteWithParamsRequest>,
    ): HttpDeleteWithParamsRequest {
      return HttpDeleteWithParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<HttpDeleteWithParamsRequest>,
    ): HttpDeleteWithParamsRequest {
      const message = createBaseHttpDeleteWithParamsRequest();
      message.id = object.id ?? 0;
      message.reason = object.reason ?? "";
      return message;
    },
  };

function createBaseHttpDeleteWithParamsResponse(): HttpDeleteWithParamsResponse {
  return { reason: "" };
}

export const HttpDeleteWithParamsResponse: MessageFns<HttpDeleteWithParamsResponse> =
  {
    fromJSON(object: any): HttpDeleteWithParamsResponse {
      return {
        reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      };
    },

    toJSON(message: HttpDeleteWithParamsResponse): unknown {
      const obj: any = {};
      if (message.reason !== "") {
        obj.reason = message.reason;
      }
      return obj;
    },

    create(
      base?: DeepPartial<HttpDeleteWithParamsResponse>,
    ): HttpDeleteWithParamsResponse {
      return HttpDeleteWithParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<HttpDeleteWithParamsResponse>,
    ): HttpDeleteWithParamsResponse {
      const message = createBaseHttpDeleteWithParamsResponse();
      message.reason = object.reason ?? "";
      return message;
    },
  };

function createBaseHTTPGetWithURLSearchParamsRequest(): HTTPGetWithURLSearchParamsRequest {
  return { a: 0, b: undefined, c: [], d: undefined };
}

export const HTTPGetWithURLSearchParamsRequest: MessageFns<HTTPGetWithURLSearchParamsRequest> =
  {
    fromJSON(object: any): HTTPGetWithURLSearchParamsRequest {
      return {
        a: isSet(object.a) ? globalThis.Number(object.a) : 0,
        b: isSet(object.b) ? PostRequest.fromJSON(object.b) : undefined,
        c: globalThis.Array.isArray(object?.c)
          ? object.c.map((e: any) => globalThis.Number(e))
          : [],
        d: isSet(object.d) ? ExternalMessage.fromJSON(object.d) : undefined,
      };
    },

    toJSON(message: HTTPGetWithURLSearchParamsRequest): unknown {
      const obj: any = {};
      if (message.a !== 0) {
        obj.a = Math.round(message.a);
      }
      if (message.b !== undefined) {
        obj.b = PostRequest.toJSON(message.b);
      }
      if (message.c?.length) {
        obj.c = message.c.map((e) => Math.round(e));
      }
      if (message.d !== undefined) {
        obj.d = ExternalMessage.toJSON(message.d);
      }
      return obj;
    },

    create(
      base?: DeepPartial<HTTPGetWithURLSearchParamsRequest>,
    ): HTTPGetWithURLSearchParamsRequest {
      return HTTPGetWithURLSearchParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<HTTPGetWithURLSearchParamsRequest>,
    ): HTTPGetWithURLSearchParamsRequest {
      const message = createBaseHTTPGetWithURLSearchParamsRequest();
      message.a = object.a ?? 0;
      message.b =
        object.b !== undefined && object.b !== null
          ? PostRequest.fromPartial(object.b)
          : undefined;
      message.c = object.c?.map((e) => e) || [];
      message.d =
        object.d !== undefined && object.d !== null
          ? ExternalMessage.fromPartial(object.d)
          : undefined;
      return message;
    },
  };

function createBaseHTTPGetWithURLSearchParamsResponse(): HTTPGetWithURLSearchParamsResponse {
  return { urlSearchParamsResult: 0 };
}

export const HTTPGetWithURLSearchParamsResponse: MessageFns<HTTPGetWithURLSearchParamsResponse> =
  {
    fromJSON(object: any): HTTPGetWithURLSearchParamsResponse {
      return {
        urlSearchParamsResult: isSet(object.urlSearchParamsResult)
          ? globalThis.Number(object.urlSearchParamsResult)
          : 0,
      };
    },

    toJSON(message: HTTPGetWithURLSearchParamsResponse): unknown {
      const obj: any = {};
      if (message.urlSearchParamsResult !== 0) {
        obj.urlSearchParamsResult = Math.round(message.urlSearchParamsResult);
      }
      return obj;
    },

    create(
      base?: DeepPartial<HTTPGetWithURLSearchParamsResponse>,
    ): HTTPGetWithURLSearchParamsResponse {
      return HTTPGetWithURLSearchParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<HTTPGetWithURLSearchParamsResponse>,
    ): HTTPGetWithURLSearchParamsResponse {
      const message = createBaseHTTPGetWithURLSearchParamsResponse();
      message.urlSearchParamsResult = object.urlSearchParamsResult ?? 0;
      return message;
    },
  };

function createBaseZeroValueMsg(): ZeroValueMsg {
  return { c: 0, d: [], e: false };
}

export const ZeroValueMsg: MessageFns<ZeroValueMsg> = {
  fromJSON(object: any): ZeroValueMsg {
    return {
      c: isSet(object.c) ? globalThis.Number(object.c) : 0,
      d: globalThis.Array.isArray(object?.d)
        ? object.d.map((e: any) => globalThis.Number(e))
        : [],
      e: isSet(object.e) ? globalThis.Boolean(object.e) : false,
    };
  },

  toJSON(message: ZeroValueMsg): unknown {
    const obj: any = {};
    if (message.c !== 0) {
      obj.c = Math.round(message.c);
    }
    if (message.d?.length) {
      obj.d = message.d.map((e) => Math.round(e));
    }
    if (message.e !== false) {
      obj.e = message.e;
    }
    return obj;
  },

  create(base?: DeepPartial<ZeroValueMsg>): ZeroValueMsg {
    return ZeroValueMsg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ZeroValueMsg>): ZeroValueMsg {
    const message = createBaseZeroValueMsg();
    message.c = object.c ?? 0;
    message.d = object.d?.map((e) => e) || [];
    message.e = object.e ?? false;
    return message;
  },
};

function createBaseHTTPGetWithZeroValueURLSearchParamsRequest(): HTTPGetWithZeroValueURLSearchParamsRequest {
  return { a: "", b: "", c: undefined };
}

export const HTTPGetWithZeroValueURLSearchParamsRequest: MessageFns<HTTPGetWithZeroValueURLSearchParamsRequest> =
  {
    fromJSON(object: any): HTTPGetWithZeroValueURLSearchParamsRequest {
      return {
        a: isSet(object.a) ? globalThis.String(object.a) : "",
        b: isSet(object.b) ? globalThis.String(object.b) : "",
        c: isSet(object.c) ? ZeroValueMsg.fromJSON(object.c) : undefined,
      };
    },

    toJSON(message: HTTPGetWithZeroValueURLSearchParamsRequest): unknown {
      const obj: any = {};
      if (message.a !== "") {
        obj.a = message.a;
      }
      if (message.b !== "") {
        obj.b = message.b;
      }
      if (message.c !== undefined) {
        obj.c = ZeroValueMsg.toJSON(message.c);
      }
      return obj;
    },

    create(
      base?: DeepPartial<HTTPGetWithZeroValueURLSearchParamsRequest>,
    ): HTTPGetWithZeroValueURLSearchParamsRequest {
      return HTTPGetWithZeroValueURLSearchParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<HTTPGetWithZeroValueURLSearchParamsRequest>,
    ): HTTPGetWithZeroValueURLSearchParamsRequest {
      const message = createBaseHTTPGetWithZeroValueURLSearchParamsRequest();
      message.a = object.a ?? "";
      message.b = object.b ?? "";
      message.c =
        object.c !== undefined && object.c !== null
          ? ZeroValueMsg.fromPartial(object.c)
          : undefined;
      return message;
    },
  };

function createBaseHTTPGetWithZeroValueURLSearchParamsResponse(): HTTPGetWithZeroValueURLSearchParamsResponse {
  return { a: "", b: "", zeroValueMsg: undefined };
}

export const HTTPGetWithZeroValueURLSearchParamsResponse: MessageFns<HTTPGetWithZeroValueURLSearchParamsResponse> =
  {
    fromJSON(object: any): HTTPGetWithZeroValueURLSearchParamsResponse {
      return {
        a: isSet(object.a) ? globalThis.String(object.a) : "",
        b: isSet(object.b) ? globalThis.String(object.b) : "",
        zeroValueMsg: isSet(object.zeroValueMsg)
          ? ZeroValueMsg.fromJSON(object.zeroValueMsg)
          : undefined,
      };
    },

    toJSON(message: HTTPGetWithZeroValueURLSearchParamsResponse): unknown {
      const obj: any = {};
      if (message.a !== "") {
        obj.a = message.a;
      }
      if (message.b !== "") {
        obj.b = message.b;
      }
      if (message.zeroValueMsg !== undefined) {
        obj.zeroValueMsg = ZeroValueMsg.toJSON(message.zeroValueMsg);
      }
      return obj;
    },

    create(
      base?: DeepPartial<HTTPGetWithZeroValueURLSearchParamsResponse>,
    ): HTTPGetWithZeroValueURLSearchParamsResponse {
      return HTTPGetWithZeroValueURLSearchParamsResponse.fromPartial(
        base ?? {},
      );
    },
    fromPartial(
      object: DeepPartial<HTTPGetWithZeroValueURLSearchParamsResponse>,
    ): HTTPGetWithZeroValueURLSearchParamsResponse {
      const message = createBaseHTTPGetWithZeroValueURLSearchParamsResponse();
      message.a = object.a ?? "";
      message.b = object.b ?? "";
      message.zeroValueMsg =
        object.zeroValueMsg !== undefined && object.zeroValueMsg !== null
          ? ZeroValueMsg.fromPartial(object.zeroValueMsg)
          : undefined;
      return message;
    },
  };

function createBaseOptionalFieldsRequest(): OptionalFieldsRequest {
  return {};
}

export const OptionalFieldsRequest: MessageFns<OptionalFieldsRequest> = {
  fromJSON(_: any): OptionalFieldsRequest {
    return {};
  },

  toJSON(_: OptionalFieldsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OptionalFieldsRequest>): OptionalFieldsRequest {
    return OptionalFieldsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OptionalFieldsRequest>): OptionalFieldsRequest {
    const message = createBaseOptionalFieldsRequest();
    return message;
  },
};

function createBaseOptionalFieldsResponse(): OptionalFieldsResponse {
  return {
    emptyStr: "",
    emptyNumber: 0,
    emptyMsg: undefined,
    emptyOptStr: undefined,
    emptyOptNumber: undefined,
    emptyOptMsg: undefined,
    zeroStr: "",
    zeroNumber: 0,
    zeroMsg: undefined,
    zeroOptStr: undefined,
    zeroOptNumber: undefined,
    zeroOptMsg: undefined,
    definedStr: "",
    definedNumber: 0,
    definedMsg: undefined,
    definedOptStr: undefined,
    definedOptNumber: undefined,
    definedOptMsg: undefined,
  };
}

export const OptionalFieldsResponse: MessageFns<OptionalFieldsResponse> = {
  fromJSON(object: any): OptionalFieldsResponse {
    return {
      emptyStr: isSet(object.emptyStr)
        ? globalThis.String(object.emptyStr)
        : "",
      emptyNumber: isSet(object.emptyNumber)
        ? globalThis.Number(object.emptyNumber)
        : 0,
      emptyMsg: isSet(object.emptyMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.emptyMsg)
        : undefined,
      emptyOptStr: isSet(object.emptyOptStr)
        ? globalThis.String(object.emptyOptStr)
        : undefined,
      emptyOptNumber: isSet(object.emptyOptNumber)
        ? globalThis.Number(object.emptyOptNumber)
        : undefined,
      emptyOptMsg: isSet(object.emptyOptMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.emptyOptMsg)
        : undefined,
      zeroStr: isSet(object.zeroStr) ? globalThis.String(object.zeroStr) : "",
      zeroNumber: isSet(object.zeroNumber)
        ? globalThis.Number(object.zeroNumber)
        : 0,
      zeroMsg: isSet(object.zeroMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.zeroMsg)
        : undefined,
      zeroOptStr: isSet(object.zeroOptStr)
        ? globalThis.String(object.zeroOptStr)
        : undefined,
      zeroOptNumber: isSet(object.zeroOptNumber)
        ? globalThis.Number(object.zeroOptNumber)
        : undefined,
      zeroOptMsg: isSet(object.zeroOptMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.zeroOptMsg)
        : undefined,
      definedStr: isSet(object.definedStr)
        ? globalThis.String(object.definedStr)
        : "",
      definedNumber: isSet(object.definedNumber)
        ? globalThis.Number(object.definedNumber)
        : 0,
      definedMsg: isSet(object.definedMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.definedMsg)
        : undefined,
      definedOptStr: isSet(object.definedOptStr)
        ? globalThis.String(object.definedOptStr)
        : undefined,
      definedOptNumber: isSet(object.definedOptNumber)
        ? globalThis.Number(object.definedOptNumber)
        : undefined,
      definedOptMsg: isSet(object.definedOptMsg)
        ? OptionalFieldsSubMsg.fromJSON(object.definedOptMsg)
        : undefined,
    };
  },

  toJSON(message: OptionalFieldsResponse): unknown {
    const obj: any = {};
    if (message.emptyStr !== "") {
      obj.emptyStr = message.emptyStr;
    }
    if (message.emptyNumber !== 0) {
      obj.emptyNumber = Math.round(message.emptyNumber);
    }
    if (message.emptyMsg !== undefined) {
      obj.emptyMsg = OptionalFieldsSubMsg.toJSON(message.emptyMsg);
    }
    if (message.emptyOptStr !== undefined) {
      obj.emptyOptStr = message.emptyOptStr;
    }
    if (message.emptyOptNumber !== undefined) {
      obj.emptyOptNumber = Math.round(message.emptyOptNumber);
    }
    if (message.emptyOptMsg !== undefined) {
      obj.emptyOptMsg = OptionalFieldsSubMsg.toJSON(message.emptyOptMsg);
    }
    if (message.zeroStr !== "") {
      obj.zeroStr = message.zeroStr;
    }
    if (message.zeroNumber !== 0) {
      obj.zeroNumber = Math.round(message.zeroNumber);
    }
    if (message.zeroMsg !== undefined) {
      obj.zeroMsg = OptionalFieldsSubMsg.toJSON(message.zeroMsg);
    }
    if (message.zeroOptStr !== undefined) {
      obj.zeroOptStr = message.zeroOptStr;
    }
    if (message.zeroOptNumber !== undefined) {
      obj.zeroOptNumber = Math.round(message.zeroOptNumber);
    }
    if (message.zeroOptMsg !== undefined) {
      obj.zeroOptMsg = OptionalFieldsSubMsg.toJSON(message.zeroOptMsg);
    }
    if (message.definedStr !== "") {
      obj.definedStr = message.definedStr;
    }
    if (message.definedNumber !== 0) {
      obj.definedNumber = Math.round(message.definedNumber);
    }
    if (message.definedMsg !== undefined) {
      obj.definedMsg = OptionalFieldsSubMsg.toJSON(message.definedMsg);
    }
    if (message.definedOptStr !== undefined) {
      obj.definedOptStr = message.definedOptStr;
    }
    if (message.definedOptNumber !== undefined) {
      obj.definedOptNumber = Math.round(message.definedOptNumber);
    }
    if (message.definedOptMsg !== undefined) {
      obj.definedOptMsg = OptionalFieldsSubMsg.toJSON(message.definedOptMsg);
    }
    return obj;
  },

  create(base?: DeepPartial<OptionalFieldsResponse>): OptionalFieldsResponse {
    return OptionalFieldsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<OptionalFieldsResponse>,
  ): OptionalFieldsResponse {
    const message = createBaseOptionalFieldsResponse();
    message.emptyStr = object.emptyStr ?? "";
    message.emptyNumber = object.emptyNumber ?? 0;
    message.emptyMsg =
      object.emptyMsg !== undefined && object.emptyMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.emptyMsg)
        : undefined;
    message.emptyOptStr = object.emptyOptStr ?? undefined;
    message.emptyOptNumber = object.emptyOptNumber ?? undefined;
    message.emptyOptMsg =
      object.emptyOptMsg !== undefined && object.emptyOptMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.emptyOptMsg)
        : undefined;
    message.zeroStr = object.zeroStr ?? "";
    message.zeroNumber = object.zeroNumber ?? 0;
    message.zeroMsg =
      object.zeroMsg !== undefined && object.zeroMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.zeroMsg)
        : undefined;
    message.zeroOptStr = object.zeroOptStr ?? undefined;
    message.zeroOptNumber = object.zeroOptNumber ?? undefined;
    message.zeroOptMsg =
      object.zeroOptMsg !== undefined && object.zeroOptMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.zeroOptMsg)
        : undefined;
    message.definedStr = object.definedStr ?? "";
    message.definedNumber = object.definedNumber ?? 0;
    message.definedMsg =
      object.definedMsg !== undefined && object.definedMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.definedMsg)
        : undefined;
    message.definedOptStr = object.definedOptStr ?? undefined;
    message.definedOptNumber = object.definedOptNumber ?? undefined;
    message.definedOptMsg =
      object.definedOptMsg !== undefined && object.definedOptMsg !== null
        ? OptionalFieldsSubMsg.fromPartial(object.definedOptMsg)
        : undefined;
    return message;
  },
};

function createBaseOptionalFieldsSubMsg(): OptionalFieldsSubMsg {
  return { str: "", optStr: undefined };
}

export const OptionalFieldsSubMsg: MessageFns<OptionalFieldsSubMsg> = {
  fromJSON(object: any): OptionalFieldsSubMsg {
    return {
      str: isSet(object.str) ? globalThis.String(object.str) : "",
      optStr: isSet(object.optStr)
        ? globalThis.String(object.optStr)
        : undefined,
    };
  },

  toJSON(message: OptionalFieldsSubMsg): unknown {
    const obj: any = {};
    if (message.str !== "") {
      obj.str = message.str;
    }
    if (message.optStr !== undefined) {
      obj.optStr = message.optStr;
    }
    return obj;
  },

  create(base?: DeepPartial<OptionalFieldsSubMsg>): OptionalFieldsSubMsg {
    return OptionalFieldsSubMsg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OptionalFieldsSubMsg>): OptionalFieldsSubMsg {
    const message = createBaseOptionalFieldsSubMsg();
    message.str = object.str ?? "";
    message.optStr = object.optStr ?? undefined;
    return message;
  },
};

function createBaseNames(): Names {
  return {
    fooBar: "",
    bazbam: "",
    binbom3: "",
    tin3tam: "",
    ting3Tang: "",
    king3kong: "",
    frim3Fram: "",
    k8sField: "",
  };
}

export const Names: MessageFns<Names> = {
  fromJSON(object: any): Names {
    return {
      fooBar: isSet(object.fooBar) ? globalThis.String(object.fooBar) : "",
      bazbam: isSet(object.bazbam) ? globalThis.String(object.bazbam) : "",
      binbom3: isSet(object.binbom3) ? globalThis.String(object.binbom3) : "",
      tin3tam: isSet(object.tin3tam) ? globalThis.String(object.tin3tam) : "",
      ting3Tang: isSet(object.ting3Tang)
        ? globalThis.String(object.ting3Tang)
        : "",
      king3kong: isSet(object.king3kong)
        ? globalThis.String(object.king3kong)
        : "",
      frim3Fram: isSet(object.frim3Fram)
        ? globalThis.String(object.frim3Fram)
        : "",
      k8sField: isSet(object.k8sField)
        ? globalThis.String(object.k8sField)
        : "",
    };
  },

  toJSON(message: Names): unknown {
    const obj: any = {};
    if (message.fooBar !== "") {
      obj.fooBar = message.fooBar;
    }
    if (message.bazbam !== "") {
      obj.bazbam = message.bazbam;
    }
    if (message.binbom3 !== "") {
      obj.binbom3 = message.binbom3;
    }
    if (message.tin3tam !== "") {
      obj.tin3tam = message.tin3tam;
    }
    if (message.ting3Tang !== "") {
      obj.ting3Tang = message.ting3Tang;
    }
    if (message.king3kong !== "") {
      obj.king3kong = message.king3kong;
    }
    if (message.frim3Fram !== "") {
      obj.frim3Fram = message.frim3Fram;
    }
    if (message.k8sField !== "") {
      obj.k8sField = message.k8sField;
    }
    return obj;
  },

  create(base?: DeepPartial<Names>): Names {
    return Names.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Names>): Names {
    const message = createBaseNames();
    message.fooBar = object.fooBar ?? "";
    message.bazbam = object.bazbam ?? "";
    message.binbom3 = object.binbom3 ?? "";
    message.tin3tam = object.tin3tam ?? "";
    message.ting3Tang = object.ting3Tang ?? "";
    message.king3kong = object.king3kong ?? "";
    message.frim3Fram = object.frim3Fram ?? "";
    message.k8sField = object.k8sField ?? "";
    return message;
  },
};

function createBaseDeprecatedMessage(): DeprecatedMessage {
  return { field: "" };
}

export const DeprecatedMessage: MessageFns<DeprecatedMessage> = {
  fromJSON(object: any): DeprecatedMessage {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
    };
  },

  toJSON(message: DeprecatedMessage): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    return obj;
  },

  create(base?: DeepPartial<DeprecatedMessage>): DeprecatedMessage {
    return DeprecatedMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeprecatedMessage>): DeprecatedMessage {
    const message = createBaseDeprecatedMessage();
    message.field = object.field ?? "";
    return message;
  },
};

function createBaseMessageWithDeprecatedFields(): MessageWithDeprecatedFields {
  return { field: "", deprecatedField: "" };
}

export const MessageWithDeprecatedFields: MessageFns<MessageWithDeprecatedFields> =
  {
    fromJSON(object: any): MessageWithDeprecatedFields {
      return {
        field: isSet(object.field) ? globalThis.String(object.field) : "",
        deprecatedField: isSet(object.deprecatedField)
          ? globalThis.String(object.deprecatedField)
          : "",
      };
    },

    toJSON(message: MessageWithDeprecatedFields): unknown {
      const obj: any = {};
      if (message.field !== "") {
        obj.field = message.field;
      }
      if (message.deprecatedField !== "") {
        obj.deprecatedField = message.deprecatedField;
      }
      return obj;
    },

    create(
      base?: DeepPartial<MessageWithDeprecatedFields>,
    ): MessageWithDeprecatedFields {
      return MessageWithDeprecatedFields.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<MessageWithDeprecatedFields>,
    ): MessageWithDeprecatedFields {
      const message = createBaseMessageWithDeprecatedFields();
      message.field = object.field ?? "";
      message.deprecatedField = object.deprecatedField ?? "";
      return message;
    },
  };

function createBaseOneofMessageWithDeprecatedFields(): OneofMessageWithDeprecatedFields {
  return {
    field: "",
    deprecatedField: "",
    oneof: undefined,
    deprecatedOneof: undefined,
  };
}

export const OneofMessageWithDeprecatedFields: MessageFns<OneofMessageWithDeprecatedFields> =
  {
    fromJSON(object: any): OneofMessageWithDeprecatedFields {
      return {
        field: isSet(object.field) ? globalThis.String(object.field) : "",
        deprecatedField: isSet(object.deprecatedField)
          ? globalThis.String(object.deprecatedField)
          : "",
        oneof: isSet(object.oneof)
          ? globalThis.String(object.oneof)
          : undefined,
        deprecatedOneof: isSet(object.deprecatedOneof)
          ? globalThis.String(object.deprecatedOneof)
          : undefined,
      };
    },

    toJSON(message: OneofMessageWithDeprecatedFields): unknown {
      const obj: any = {};
      if (message.field !== "") {
        obj.field = message.field;
      }
      if (message.deprecatedField !== "") {
        obj.deprecatedField = message.deprecatedField;
      }
      if (message.oneof !== undefined) {
        obj.oneof = message.oneof;
      }
      if (message.deprecatedOneof !== undefined) {
        obj.deprecatedOneof = message.deprecatedOneof;
      }
      return obj;
    },

    create(
      base?: DeepPartial<OneofMessageWithDeprecatedFields>,
    ): OneofMessageWithDeprecatedFields {
      return OneofMessageWithDeprecatedFields.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<OneofMessageWithDeprecatedFields>,
    ): OneofMessageWithDeprecatedFields {
      const message = createBaseOneofMessageWithDeprecatedFields();
      message.field = object.field ?? "";
      message.deprecatedField = object.deprecatedField ?? "";
      message.oneof = object.oneof ?? undefined;
      message.deprecatedOneof = object.deprecatedOneof ?? undefined;
      return message;
    },
  };

function createBaseMessageWithMultipleOneOfFields(): MessageWithMultipleOneOfFields {
  return { id: "", a: undefined, b: undefined, c: undefined, d: undefined };
}

export const MessageWithMultipleOneOfFields: MessageFns<MessageWithMultipleOneOfFields> =
  {
    fromJSON(object: any): MessageWithMultipleOneOfFields {
      return {
        id: isSet(object.id) ? globalThis.String(object.id) : "",
        a: isSet(object.a) ? globalThis.String(object.a) : undefined,
        b: isSet(object.b) ? globalThis.String(object.b) : undefined,
        c: isSet(object.c) ? globalThis.Number(object.c) : undefined,
        d: isSet(object.d) ? globalThis.Number(object.d) : undefined,
      };
    },

    toJSON(message: MessageWithMultipleOneOfFields): unknown {
      const obj: any = {};
      if (message.id !== "") {
        obj.id = message.id;
      }
      if (message.a !== undefined) {
        obj.a = message.a;
      }
      if (message.b !== undefined) {
        obj.b = message.b;
      }
      if (message.c !== undefined) {
        obj.c = Math.round(message.c);
      }
      if (message.d !== undefined) {
        obj.d = Math.round(message.d);
      }
      return obj;
    },

    create(
      base?: DeepPartial<MessageWithMultipleOneOfFields>,
    ): MessageWithMultipleOneOfFields {
      return MessageWithMultipleOneOfFields.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<MessageWithMultipleOneOfFields>,
    ): MessageWithMultipleOneOfFields {
      const message = createBaseMessageWithMultipleOneOfFields();
      message.id = object.id ?? "";
      message.a = object.a ?? undefined;
      message.b = object.b ?? undefined;
      message.c = object.c ?? undefined;
      message.d = object.d ?? undefined;
      return message;
    },
  };

export type CounterServiceDefinition = typeof CounterServiceDefinition;
export const CounterServiceDefinition = {
  name: "CounterService",
  fullName: "main.CounterService",
  methods: {
    increment: {
      name: "Increment",
      requestType: UnaryRequest,
      requestStream: false,
      responseType: UnaryResponse,
      responseStream: false,
      options: {},
    },
    streamingIncrements: {
      name: "StreamingIncrements",
      requestType: StreamingRequest,
      requestStream: false,
      responseType: StreamingResponse,
      responseStream: true,
      options: {},
    },
    failingIncrement: {
      name: "FailingIncrement",
      requestType: UnaryRequest,
      requestStream: false,
      responseType: UnaryResponse,
      responseStream: false,
      options: {},
    },
    echoBinary: {
      name: "EchoBinary",
      requestType: BinaryRequest,
      requestStream: false,
      responseType: BinaryResponse,
      responseStream: false,
      options: {},
    },
    hTTPGet: {
      name: "HTTPGet",
      requestType: HttpGetRequest,
      requestStream: false,
      responseType: HttpGetResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              24, 18, 22, 47, 97, 112, 105, 47, 123, 110, 117, 109, 95, 116,
              111, 95, 105, 110, 99, 114, 101, 97, 115, 101, 125,
            ]),
          ],
        },
      },
    },
    hTTPPostWithNestedBodyPath: {
      name: "HTTPPostWithNestedBodyPath",
      requestType: HttpPostRequest,
      requestStream: false,
      responseType: HttpPostResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              16, 58, 3, 114, 101, 113, 34, 9, 47, 112, 111, 115, 116, 47, 123,
              97, 125,
            ]),
          ],
        },
      },
    },
    hTTPPostWithStarBodyPath: {
      name: "HTTPPostWithStarBodyPath",
      requestType: HttpPostRequest,
      requestStream: false,
      responseType: HttpPostResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              18, 58, 1, 42, 34, 13, 47, 112, 111, 115, 116, 47, 123, 97, 125,
              47, 123, 99, 125,
            ]),
          ],
        },
      },
    },
    hTTPPatch: {
      name: "HTTPPatch",
      requestType: HttpPatchRequest,
      requestStream: false,
      responseType: HttpPatchResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([11, 58, 1, 42, 50, 6, 47, 112, 97, 116, 99, 104]),
          ],
        },
      },
    },
    hTTPDelete: {
      name: "HTTPDelete",
      requestType: HttpDeleteRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              13, 42, 11, 47, 100, 101, 108, 101, 116, 101, 47, 123, 97, 125,
            ]),
          ],
        },
      },
    },
    hTTPDeleteWithParams: {
      name: "HTTPDeleteWithParams",
      requestType: HttpDeleteWithParamsRequest,
      requestStream: false,
      responseType: HttpDeleteWithParamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              14, 42, 12, 47, 100, 101, 108, 101, 116, 101, 47, 123, 105, 100,
              125,
            ]),
          ],
        },
      },
    },
    externalMessage: {
      name: "ExternalMessage",
      requestType: ExternalRequest,
      requestStream: false,
      responseType: ExternalResponse,
      responseStream: false,
      options: {},
    },
    hTTPGetWithURLSearchParams: {
      name: "HTTPGetWithURLSearchParams",
      requestType: HTTPGetWithURLSearchParamsRequest,
      requestStream: false,
      responseType: HTTPGetWithURLSearchParamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              16, 18, 14, 47, 97, 112, 105, 47, 113, 117, 101, 114, 121, 47,
              123, 97, 125,
            ]),
          ],
        },
      },
    },
    hTTPGetWithZeroValueURLSearchParams: {
      name: "HTTPGetWithZeroValueURLSearchParams",
      requestType: HTTPGetWithZeroValueURLSearchParamsRequest,
      requestStream: false,
      responseType: HTTPGetWithZeroValueURLSearchParamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              13, 18, 11, 47, 112, 97, 116, 104, 47, 113, 117, 101, 114, 121,
            ]),
          ],
        },
      },
    },
    hTTPGetWithOptionalFields: {
      name: "HTTPGetWithOptionalFields",
      requestType: OptionalFieldsRequest,
      requestStream: false,
      responseType: OptionalFieldsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              11, 18, 9, 47, 111, 112, 116, 105, 111, 110, 97, 108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CounterServiceImplementation<CallContextExt = {}> {
  increment(
    request: UnaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnaryResponse>>;
  streamingIncrements(
    request: StreamingRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StreamingResponse>>;
  failingIncrement(
    request: UnaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnaryResponse>>;
  echoBinary(
    request: BinaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BinaryResponse>>;
  hTTPGet(
    request: HttpGetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpGetResponse>>;
  hTTPPostWithNestedBodyPath(
    request: HttpPostRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpPostResponse>>;
  hTTPPostWithStarBodyPath(
    request: HttpPostRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpPostResponse>>;
  hTTPPatch(
    request: HttpPatchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpPatchResponse>>;
  hTTPDelete(
    request: HttpDeleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  hTTPDeleteWithParams(
    request: HttpDeleteWithParamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpDeleteWithParamsResponse>>;
  externalMessage(
    request: ExternalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalResponse>>;
  hTTPGetWithURLSearchParams(
    request: HTTPGetWithURLSearchParamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HTTPGetWithURLSearchParamsResponse>>;
  hTTPGetWithZeroValueURLSearchParams(
    request: HTTPGetWithZeroValueURLSearchParamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HTTPGetWithZeroValueURLSearchParamsResponse>>;
  hTTPGetWithOptionalFields(
    request: OptionalFieldsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OptionalFieldsResponse>>;
}

export interface CounterServiceClient<CallOptionsExt = {}> {
  increment(
    request: DeepPartial<UnaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnaryResponse>;
  streamingIncrements(
    request: DeepPartial<StreamingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<StreamingResponse>;
  failingIncrement(
    request: DeepPartial<UnaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnaryResponse>;
  echoBinary(
    request: DeepPartial<BinaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BinaryResponse>;
  hTTPGet(
    request: DeepPartial<HttpGetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpGetResponse>;
  hTTPPostWithNestedBodyPath(
    request: DeepPartial<HttpPostRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpPostResponse>;
  hTTPPostWithStarBodyPath(
    request: DeepPartial<HttpPostRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpPostResponse>;
  hTTPPatch(
    request: DeepPartial<HttpPatchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpPatchResponse>;
  hTTPDelete(
    request: DeepPartial<HttpDeleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  hTTPDeleteWithParams(
    request: DeepPartial<HttpDeleteWithParamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpDeleteWithParamsResponse>;
  externalMessage(
    request: DeepPartial<ExternalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalResponse>;
  hTTPGetWithURLSearchParams(
    request: DeepPartial<HTTPGetWithURLSearchParamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HTTPGetWithURLSearchParamsResponse>;
  hTTPGetWithZeroValueURLSearchParams(
    request: DeepPartial<HTTPGetWithZeroValueURLSearchParamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HTTPGetWithZeroValueURLSearchParamsResponse>;
  hTTPGetWithOptionalFields(
    request: DeepPartial<OptionalFieldsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OptionalFieldsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = {
  [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
